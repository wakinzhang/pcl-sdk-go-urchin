// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/v1/urchin.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BaseResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BaseResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BaseResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BaseRespMultiError, or nil
// if none found.
func (m *BaseResp) ValidateAll() error {
	return m.validate(true)
}

func (m *BaseResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return BaseRespMultiError(errors)
	}

	return nil
}

// BaseRespMultiError is an error wrapping multiple validation errors returned
// by BaseResp.ValidateAll() if the designated constraints aren't met.
type BaseRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BaseRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BaseRespMultiError) AllErrors() []error { return m }

// BaseRespValidationError is the validation error returned by
// BaseResp.Validate if the designated constraints aren't met.
type BaseRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BaseRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BaseRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BaseRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BaseRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BaseRespValidationError) ErrorName() string { return "BaseRespValidationError" }

// Error satisfies the builtin error interface
func (e BaseRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBaseResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BaseRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BaseRespValidationError{}

// Validate checks the field values on UploadObjectReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UploadObjectReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadObjectReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadObjectReqMultiError, or nil if none found.
func (m *UploadObjectReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadObjectReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 64 {
		err := UploadObjectReqValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		err := UploadObjectReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetType() <= 0 {
		err := UploadObjectReqValidationError{
			field:  "Type",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSize() < 0 {
		err := UploadObjectReqValidationError{
			field:  "Size",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Desc != nil {

		if l := utf8.RuneCountInString(m.GetDesc()); l < 0 || l > 1024 {
			err := UploadObjectReqValidationError{
				field:  "Desc",
				reason: "value length must be between 0 and 1024 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.NodeId != nil {

		if m.GetNodeId() <= 0 {
			err := UploadObjectReqValidationError{
				field:  "NodeId",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UploadObjectReqMultiError(errors)
	}

	return nil
}

// UploadObjectReqMultiError is an error wrapping multiple validation errors
// returned by UploadObjectReq.ValidateAll() if the designated constraints
// aren't met.
type UploadObjectReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadObjectReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadObjectReqMultiError) AllErrors() []error { return m }

// UploadObjectReqValidationError is the validation error returned by
// UploadObjectReq.Validate if the designated constraints aren't met.
type UploadObjectReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadObjectReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadObjectReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadObjectReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadObjectReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadObjectReqValidationError) ErrorName() string { return "UploadObjectReqValidationError" }

// Error satisfies the builtin error interface
func (e UploadObjectReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadObjectReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadObjectReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadObjectReqValidationError{}

// Validate checks the field values on UploadObjectResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UploadObjectResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadObjectResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadObjectRespMultiError, or nil if none found.
func (m *UploadObjectResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadObjectResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for TaskId

	// no validation rules for NodeType

	if len(errors) > 0 {
		return UploadObjectRespMultiError(errors)
	}

	return nil
}

// UploadObjectRespMultiError is an error wrapping multiple validation errors
// returned by UploadObjectResp.ValidateAll() if the designated constraints
// aren't met.
type UploadObjectRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadObjectRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadObjectRespMultiError) AllErrors() []error { return m }

// UploadObjectRespValidationError is the validation error returned by
// UploadObjectResp.Validate if the designated constraints aren't met.
type UploadObjectRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadObjectRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadObjectRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadObjectRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadObjectRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadObjectRespValidationError) ErrorName() string { return "UploadObjectRespValidationError" }

// Error satisfies the builtin error interface
func (e UploadObjectRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadObjectResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadObjectRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadObjectRespValidationError{}

// Validate checks the field values on
// CreateInitiateMultipartUploadSignedUrlReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateInitiateMultipartUploadSignedUrlReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateInitiateMultipartUploadSignedUrlReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateInitiateMultipartUploadSignedUrlReqMultiError, or nil if none found.
func (m *CreateInitiateMultipartUploadSignedUrlReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInitiateMultipartUploadSignedUrlReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTaskId() <= 0 {
		err := CreateInitiateMultipartUploadSignedUrlReqValidationError{
			field:  "TaskId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateInitiateMultipartUploadSignedUrlReqMultiError(errors)
	}

	return nil
}

// CreateInitiateMultipartUploadSignedUrlReqMultiError is an error wrapping
// multiple validation errors returned by
// CreateInitiateMultipartUploadSignedUrlReq.ValidateAll() if the designated
// constraints aren't met.
type CreateInitiateMultipartUploadSignedUrlReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInitiateMultipartUploadSignedUrlReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInitiateMultipartUploadSignedUrlReqMultiError) AllErrors() []error { return m }

// CreateInitiateMultipartUploadSignedUrlReqValidationError is the validation
// error returned by CreateInitiateMultipartUploadSignedUrlReq.Validate if the
// designated constraints aren't met.
type CreateInitiateMultipartUploadSignedUrlReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInitiateMultipartUploadSignedUrlReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInitiateMultipartUploadSignedUrlReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInitiateMultipartUploadSignedUrlReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInitiateMultipartUploadSignedUrlReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInitiateMultipartUploadSignedUrlReqValidationError) ErrorName() string {
	return "CreateInitiateMultipartUploadSignedUrlReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInitiateMultipartUploadSignedUrlReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInitiateMultipartUploadSignedUrlReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInitiateMultipartUploadSignedUrlReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInitiateMultipartUploadSignedUrlReqValidationError{}

// Validate checks the field values on CreateUploadPartSignedUrlReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUploadPartSignedUrlReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUploadPartSignedUrlReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUploadPartSignedUrlReqMultiError, or nil if none found.
func (m *CreateUploadPartSignedUrlReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUploadPartSignedUrlReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUploadId()); l < 1 || l > 64 {
		err := CreateUploadPartSignedUrlReqValidationError{
			field:  "UploadId",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPartNumber() <= 0 {
		err := CreateUploadPartSignedUrlReqValidationError{
			field:  "PartNumber",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTaskId() <= 0 {
		err := CreateUploadPartSignedUrlReqValidationError{
			field:  "TaskId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateUploadPartSignedUrlReqMultiError(errors)
	}

	return nil
}

// CreateUploadPartSignedUrlReqMultiError is an error wrapping multiple
// validation errors returned by CreateUploadPartSignedUrlReq.ValidateAll() if
// the designated constraints aren't met.
type CreateUploadPartSignedUrlReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUploadPartSignedUrlReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUploadPartSignedUrlReqMultiError) AllErrors() []error { return m }

// CreateUploadPartSignedUrlReqValidationError is the validation error returned
// by CreateUploadPartSignedUrlReq.Validate if the designated constraints
// aren't met.
type CreateUploadPartSignedUrlReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUploadPartSignedUrlReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUploadPartSignedUrlReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUploadPartSignedUrlReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUploadPartSignedUrlReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUploadPartSignedUrlReqValidationError) ErrorName() string {
	return "CreateUploadPartSignedUrlReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUploadPartSignedUrlReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUploadPartSignedUrlReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUploadPartSignedUrlReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUploadPartSignedUrlReqValidationError{}

// Validate checks the field values on
// CreateCompleteMultipartUploadSignedUrlReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateCompleteMultipartUploadSignedUrlReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateCompleteMultipartUploadSignedUrlReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateCompleteMultipartUploadSignedUrlReqMultiError, or nil if none found.
func (m *CreateCompleteMultipartUploadSignedUrlReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCompleteMultipartUploadSignedUrlReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUploadId()); l < 1 || l > 64 {
		err := CreateCompleteMultipartUploadSignedUrlReqValidationError{
			field:  "UploadId",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTaskId() <= 0 {
		err := CreateCompleteMultipartUploadSignedUrlReqValidationError{
			field:  "TaskId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateCompleteMultipartUploadSignedUrlReqMultiError(errors)
	}

	return nil
}

// CreateCompleteMultipartUploadSignedUrlReqMultiError is an error wrapping
// multiple validation errors returned by
// CreateCompleteMultipartUploadSignedUrlReq.ValidateAll() if the designated
// constraints aren't met.
type CreateCompleteMultipartUploadSignedUrlReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCompleteMultipartUploadSignedUrlReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCompleteMultipartUploadSignedUrlReqMultiError) AllErrors() []error { return m }

// CreateCompleteMultipartUploadSignedUrlReqValidationError is the validation
// error returned by CreateCompleteMultipartUploadSignedUrlReq.Validate if the
// designated constraints aren't met.
type CreateCompleteMultipartUploadSignedUrlReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCompleteMultipartUploadSignedUrlReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCompleteMultipartUploadSignedUrlReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCompleteMultipartUploadSignedUrlReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCompleteMultipartUploadSignedUrlReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCompleteMultipartUploadSignedUrlReqValidationError) ErrorName() string {
	return "CreateCompleteMultipartUploadSignedUrlReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCompleteMultipartUploadSignedUrlReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCompleteMultipartUploadSignedUrlReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCompleteMultipartUploadSignedUrlReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCompleteMultipartUploadSignedUrlReqValidationError{}

// Validate checks the field values on CreateSignedUrlResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSignedUrlResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSignedUrlResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSignedUrlRespMultiError, or nil if none found.
func (m *CreateSignedUrlResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSignedUrlResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for SignedUrl

	{
		sorted_keys := make([]string, len(m.GetHeader()))
		i := 0
		for key := range m.GetHeader() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetHeader()[key]
			_ = val

			// no validation rules for Header[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CreateSignedUrlRespValidationError{
							field:  fmt.Sprintf("Header[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CreateSignedUrlRespValidationError{
							field:  fmt.Sprintf("Header[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CreateSignedUrlRespValidationError{
						field:  fmt.Sprintf("Header[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return CreateSignedUrlRespMultiError(errors)
	}

	return nil
}

// CreateSignedUrlRespMultiError is an error wrapping multiple validation
// errors returned by CreateSignedUrlResp.ValidateAll() if the designated
// constraints aren't met.
type CreateSignedUrlRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSignedUrlRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSignedUrlRespMultiError) AllErrors() []error { return m }

// CreateSignedUrlRespValidationError is the validation error returned by
// CreateSignedUrlResp.Validate if the designated constraints aren't met.
type CreateSignedUrlRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSignedUrlRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSignedUrlRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSignedUrlRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSignedUrlRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSignedUrlRespValidationError) ErrorName() string {
	return "CreateSignedUrlRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSignedUrlRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSignedUrlResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSignedUrlRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSignedUrlRespValidationError{}

// Validate checks the field values on HeaderValues with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HeaderValues) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HeaderValues with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HeaderValuesMultiError, or
// nil if none found.
func (m *HeaderValues) ValidateAll() error {
	return m.validate(true)
}

func (m *HeaderValues) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HeaderValuesMultiError(errors)
	}

	return nil
}

// HeaderValuesMultiError is an error wrapping multiple validation errors
// returned by HeaderValues.ValidateAll() if the designated constraints aren't met.
type HeaderValuesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HeaderValuesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HeaderValuesMultiError) AllErrors() []error { return m }

// HeaderValuesValidationError is the validation error returned by
// HeaderValues.Validate if the designated constraints aren't met.
type HeaderValuesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeaderValuesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeaderValuesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeaderValuesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeaderValuesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeaderValuesValidationError) ErrorName() string { return "HeaderValuesValidationError" }

// Error satisfies the builtin error interface
func (e HeaderValuesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeaderValues.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeaderValuesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeaderValuesValidationError{}

// Validate checks the field values on DownloadObjectReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DownloadObjectReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DownloadObjectReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DownloadObjectReqMultiError, or nil if none found.
func (m *DownloadObjectReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadObjectReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 64 {
		err := DownloadObjectReqValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetObjUuid()); l < 1 || l > 64 {
		err := DownloadObjectReqValidationError{
			field:  "ObjUuid",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.NodeId != nil {

		if m.GetNodeId() <= 0 {
			err := DownloadObjectReqValidationError{
				field:  "NodeId",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return DownloadObjectReqMultiError(errors)
	}

	return nil
}

// DownloadObjectReqMultiError is an error wrapping multiple validation errors
// returned by DownloadObjectReq.ValidateAll() if the designated constraints
// aren't met.
type DownloadObjectReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadObjectReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadObjectReqMultiError) AllErrors() []error { return m }

// DownloadObjectReqValidationError is the validation error returned by
// DownloadObjectReq.Validate if the designated constraints aren't met.
type DownloadObjectReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadObjectReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadObjectReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadObjectReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadObjectReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadObjectReqValidationError) ErrorName() string {
	return "DownloadObjectReqValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadObjectReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadObjectReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadObjectReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadObjectReqValidationError{}

// Validate checks the field values on DownloadObjectTaskParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DownloadObjectTaskParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DownloadObjectTaskParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DownloadObjectTaskParamsMultiError, or nil if none found.
func (m *DownloadObjectTaskParams) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadObjectTaskParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DownloadObjectTaskParamsValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DownloadObjectTaskParamsValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DownloadObjectTaskParamsValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NodeId

	if len(errors) > 0 {
		return DownloadObjectTaskParamsMultiError(errors)
	}

	return nil
}

// DownloadObjectTaskParamsMultiError is an error wrapping multiple validation
// errors returned by DownloadObjectTaskParams.ValidateAll() if the designated
// constraints aren't met.
type DownloadObjectTaskParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadObjectTaskParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadObjectTaskParamsMultiError) AllErrors() []error { return m }

// DownloadObjectTaskParamsValidationError is the validation error returned by
// DownloadObjectTaskParams.Validate if the designated constraints aren't met.
type DownloadObjectTaskParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadObjectTaskParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadObjectTaskParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadObjectTaskParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadObjectTaskParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadObjectTaskParamsValidationError) ErrorName() string {
	return "DownloadObjectTaskParamsValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadObjectTaskParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadObjectTaskParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadObjectTaskParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadObjectTaskParamsValidationError{}

// Validate checks the field values on DownloadObjectResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DownloadObjectResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DownloadObjectResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DownloadObjectRespMultiError, or nil if none found.
func (m *DownloadObjectResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadObjectResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for TaskId

	// no validation rules for Location

	// no validation rules for NodeType

	if len(errors) > 0 {
		return DownloadObjectRespMultiError(errors)
	}

	return nil
}

// DownloadObjectRespMultiError is an error wrapping multiple validation errors
// returned by DownloadObjectResp.ValidateAll() if the designated constraints
// aren't met.
type DownloadObjectRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadObjectRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadObjectRespMultiError) AllErrors() []error { return m }

// DownloadObjectRespValidationError is the validation error returned by
// DownloadObjectResp.Validate if the designated constraints aren't met.
type DownloadObjectRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadObjectRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadObjectRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadObjectRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadObjectRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadObjectRespValidationError) ErrorName() string {
	return "DownloadObjectRespValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadObjectRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadObjectResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadObjectRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadObjectRespValidationError{}

// Validate checks the field values on CreateListObjectsSignedUrlReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateListObjectsSignedUrlReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateListObjectsSignedUrlReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateListObjectsSignedUrlReqMultiError, or nil if none found.
func (m *CreateListObjectsSignedUrlReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateListObjectsSignedUrlReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPrefix()) < 1 {
		err := CreateListObjectsSignedUrlReqValidationError{
			field:  "Prefix",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateListObjectsSignedUrlReqMultiError(errors)
	}

	return nil
}

// CreateListObjectsSignedUrlReqMultiError is an error wrapping multiple
// validation errors returned by CreateListObjectsSignedUrlReq.ValidateAll()
// if the designated constraints aren't met.
type CreateListObjectsSignedUrlReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateListObjectsSignedUrlReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateListObjectsSignedUrlReqMultiError) AllErrors() []error { return m }

// CreateListObjectsSignedUrlReqValidationError is the validation error
// returned by CreateListObjectsSignedUrlReq.Validate if the designated
// constraints aren't met.
type CreateListObjectsSignedUrlReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateListObjectsSignedUrlReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateListObjectsSignedUrlReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateListObjectsSignedUrlReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateListObjectsSignedUrlReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateListObjectsSignedUrlReqValidationError) ErrorName() string {
	return "CreateListObjectsSignedUrlReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateListObjectsSignedUrlReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateListObjectsSignedUrlReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateListObjectsSignedUrlReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateListObjectsSignedUrlReqValidationError{}

// Validate checks the field values on MigrateObjectReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MigrateObjectReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MigrateObjectReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MigrateObjectReqMultiError, or nil if none found.
func (m *MigrateObjectReq) ValidateAll() error {
	return m.validate(true)
}

func (m *MigrateObjectReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 64 {
		err := MigrateObjectReqValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetObjUuid()); l < 1 || l > 64 {
		err := MigrateObjectReqValidationError{
			field:  "ObjUuid",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTargetNodeId() <= 0 {
		err := MigrateObjectReqValidationError{
			field:  "TargetNodeId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.SourceNodeId != nil {

		if m.GetSourceNodeId() <= 0 {
			err := MigrateObjectReqValidationError{
				field:  "SourceNodeId",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return MigrateObjectReqMultiError(errors)
	}

	return nil
}

// MigrateObjectReqMultiError is an error wrapping multiple validation errors
// returned by MigrateObjectReq.ValidateAll() if the designated constraints
// aren't met.
type MigrateObjectReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MigrateObjectReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MigrateObjectReqMultiError) AllErrors() []error { return m }

// MigrateObjectReqValidationError is the validation error returned by
// MigrateObjectReq.Validate if the designated constraints aren't met.
type MigrateObjectReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MigrateObjectReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MigrateObjectReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MigrateObjectReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MigrateObjectReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MigrateObjectReqValidationError) ErrorName() string { return "MigrateObjectReqValidationError" }

// Error satisfies the builtin error interface
func (e MigrateObjectReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMigrateObjectReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MigrateObjectReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MigrateObjectReqValidationError{}

// Validate checks the field values on MigrateObjectTaskParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MigrateObjectTaskParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MigrateObjectTaskParams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MigrateObjectTaskParamsMultiError, or nil if none found.
func (m *MigrateObjectTaskParams) ValidateAll() error {
	return m.validate(true)
}

func (m *MigrateObjectTaskParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MigrateObjectTaskParamsValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MigrateObjectTaskParamsValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MigrateObjectTaskParamsValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SourceNodeId

	if len(errors) > 0 {
		return MigrateObjectTaskParamsMultiError(errors)
	}

	return nil
}

// MigrateObjectTaskParamsMultiError is an error wrapping multiple validation
// errors returned by MigrateObjectTaskParams.ValidateAll() if the designated
// constraints aren't met.
type MigrateObjectTaskParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MigrateObjectTaskParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MigrateObjectTaskParamsMultiError) AllErrors() []error { return m }

// MigrateObjectTaskParamsValidationError is the validation error returned by
// MigrateObjectTaskParams.Validate if the designated constraints aren't met.
type MigrateObjectTaskParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MigrateObjectTaskParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MigrateObjectTaskParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MigrateObjectTaskParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MigrateObjectTaskParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MigrateObjectTaskParamsValidationError) ErrorName() string {
	return "MigrateObjectTaskParamsValidationError"
}

// Error satisfies the builtin error interface
func (e MigrateObjectTaskParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMigrateObjectTaskParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MigrateObjectTaskParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MigrateObjectTaskParamsValidationError{}

// Validate checks the field values on MigrateObjectResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MigrateObjectResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MigrateObjectResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MigrateObjectRespMultiError, or nil if none found.
func (m *MigrateObjectResp) ValidateAll() error {
	return m.validate(true)
}

func (m *MigrateObjectResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for TaskId

	// no validation rules for NodeType

	if len(errors) > 0 {
		return MigrateObjectRespMultiError(errors)
	}

	return nil
}

// MigrateObjectRespMultiError is an error wrapping multiple validation errors
// returned by MigrateObjectResp.ValidateAll() if the designated constraints
// aren't met.
type MigrateObjectRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MigrateObjectRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MigrateObjectRespMultiError) AllErrors() []error { return m }

// MigrateObjectRespValidationError is the validation error returned by
// MigrateObjectResp.Validate if the designated constraints aren't met.
type MigrateObjectRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MigrateObjectRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MigrateObjectRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MigrateObjectRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MigrateObjectRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MigrateObjectRespValidationError) ErrorName() string {
	return "MigrateObjectRespValidationError"
}

// Error satisfies the builtin error interface
func (e MigrateObjectRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMigrateObjectResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MigrateObjectRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MigrateObjectRespValidationError{}

// Validate checks the field values on GetObjectReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetObjectReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetObjectReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetObjectReqMultiError, or
// nil if none found.
func (m *GetObjectReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetObjectReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 64 {
		err := GetObjectReqValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageIndex() <= 0 {
		err := GetObjectReqValidationError{
			field:  "PageIndex",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val >= 100 {
		err := GetObjectReqValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 100)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.SortBy != nil {

		if utf8.RuneCountInString(m.GetSortBy()) < 1 {
			err := GetObjectReqValidationError{
				field:  "SortBy",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.OrderBy != nil {

		if _, ok := _GetObjectReq_OrderBy_InLookup[m.GetOrderBy()]; !ok {
			err := GetObjectReqValidationError{
				field:  "OrderBy",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.ObjUuid != nil {

		if l := utf8.RuneCountInString(m.GetObjUuid()); l < 1 || l > 64 {
			err := GetObjectReqValidationError{
				field:  "ObjUuid",
				reason: "value length must be between 1 and 64 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetObjectReqMultiError(errors)
	}

	return nil
}

// GetObjectReqMultiError is an error wrapping multiple validation errors
// returned by GetObjectReq.ValidateAll() if the designated constraints aren't met.
type GetObjectReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetObjectReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetObjectReqMultiError) AllErrors() []error { return m }

// GetObjectReqValidationError is the validation error returned by
// GetObjectReq.Validate if the designated constraints aren't met.
type GetObjectReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetObjectReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetObjectReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetObjectReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetObjectReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetObjectReqValidationError) ErrorName() string { return "GetObjectReqValidationError" }

// Error satisfies the builtin error interface
func (e GetObjectReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetObjectReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetObjectReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetObjectReqValidationError{}

var _GetObjectReq_OrderBy_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

// Validate checks the field values on GetObjectResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetObjectResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetObjectResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetObjectRespMultiError, or
// nil if none found.
func (m *GetObjectResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetObjectResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetObjectRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetObjectRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetObjectRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetObjectRespMultiError(errors)
	}

	return nil
}

// GetObjectRespMultiError is an error wrapping multiple validation errors
// returned by GetObjectResp.ValidateAll() if the designated constraints
// aren't met.
type GetObjectRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetObjectRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetObjectRespMultiError) AllErrors() []error { return m }

// GetObjectRespValidationError is the validation error returned by
// GetObjectResp.Validate if the designated constraints aren't met.
type GetObjectRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetObjectRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetObjectRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetObjectRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetObjectRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetObjectRespValidationError) ErrorName() string { return "GetObjectRespValidationError" }

// Error satisfies the builtin error interface
func (e GetObjectRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetObjectResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetObjectRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetObjectRespValidationError{}

// Validate checks the field values on GetObjectRespData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetObjectRespData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetObjectRespData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetObjectRespDataMultiError, or nil if none found.
func (m *GetObjectRespData) ValidateAll() error {
	return m.validate(true)
}

func (m *GetObjectRespData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetObjectRespDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetObjectRespDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetObjectRespDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetObjectRespDataMultiError(errors)
	}

	return nil
}

// GetObjectRespDataMultiError is an error wrapping multiple validation errors
// returned by GetObjectRespData.ValidateAll() if the designated constraints
// aren't met.
type GetObjectRespDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetObjectRespDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetObjectRespDataMultiError) AllErrors() []error { return m }

// GetObjectRespDataValidationError is the validation error returned by
// GetObjectRespData.Validate if the designated constraints aren't met.
type GetObjectRespDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetObjectRespDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetObjectRespDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetObjectRespDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetObjectRespDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetObjectRespDataValidationError) ErrorName() string {
	return "GetObjectRespDataValidationError"
}

// Error satisfies the builtin error interface
func (e GetObjectRespDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetObjectRespData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetObjectRespDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetObjectRespDataValidationError{}

// Validate checks the field values on DeleteObjectReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteObjectReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteObjectReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteObjectReqMultiError, or nil if none found.
func (m *DeleteObjectReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteObjectReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 64 {
		err := DeleteObjectReqValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetObjUuid()); l < 1 || l > 64 {
		err := DeleteObjectReqValidationError{
			field:  "ObjUuid",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteObjectReqMultiError(errors)
	}

	return nil
}

// DeleteObjectReqMultiError is an error wrapping multiple validation errors
// returned by DeleteObjectReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteObjectReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteObjectReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteObjectReqMultiError) AllErrors() []error { return m }

// DeleteObjectReqValidationError is the validation error returned by
// DeleteObjectReq.Validate if the designated constraints aren't met.
type DeleteObjectReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteObjectReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteObjectReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteObjectReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteObjectReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteObjectReqValidationError) ErrorName() string { return "DeleteObjectReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteObjectReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteObjectReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteObjectReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteObjectReqValidationError{}

// Validate checks the field values on DeleteObjectResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteObjectResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteObjectResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteObjectRespMultiError, or nil if none found.
func (m *DeleteObjectResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteObjectResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for TaskId

	if len(errors) > 0 {
		return DeleteObjectRespMultiError(errors)
	}

	return nil
}

// DeleteObjectRespMultiError is an error wrapping multiple validation errors
// returned by DeleteObjectResp.ValidateAll() if the designated constraints
// aren't met.
type DeleteObjectRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteObjectRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteObjectRespMultiError) AllErrors() []error { return m }

// DeleteObjectRespValidationError is the validation error returned by
// DeleteObjectResp.Validate if the designated constraints aren't met.
type DeleteObjectRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteObjectRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteObjectRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteObjectRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteObjectRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteObjectRespValidationError) ErrorName() string { return "DeleteObjectRespValidationError" }

// Error satisfies the builtin error interface
func (e DeleteObjectRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteObjectResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteObjectRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteObjectRespValidationError{}

// Validate checks the field values on PutObjectReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PutObjectReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutObjectReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PutObjectReqMultiError, or
// nil if none found.
func (m *PutObjectReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PutObjectReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 64 {
		err := PutObjectReqValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetObjUuid()); l < 1 || l > 64 {
		err := PutObjectReqValidationError{
			field:  "ObjUuid",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Name != nil {

		if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
			err := PutObjectReqValidationError{
				field:  "Name",
				reason: "value length must be between 1 and 64 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Desc != nil {

		if l := utf8.RuneCountInString(m.GetDesc()); l < 0 || l > 1024 {
			err := PutObjectReqValidationError{
				field:  "Desc",
				reason: "value length must be between 0 and 1024 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return PutObjectReqMultiError(errors)
	}

	return nil
}

// PutObjectReqMultiError is an error wrapping multiple validation errors
// returned by PutObjectReq.ValidateAll() if the designated constraints aren't met.
type PutObjectReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutObjectReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutObjectReqMultiError) AllErrors() []error { return m }

// PutObjectReqValidationError is the validation error returned by
// PutObjectReq.Validate if the designated constraints aren't met.
type PutObjectReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutObjectReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutObjectReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutObjectReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutObjectReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutObjectReqValidationError) ErrorName() string { return "PutObjectReqValidationError" }

// Error satisfies the builtin error interface
func (e PutObjectReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutObjectReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutObjectReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutObjectReqValidationError{}

// Validate checks the field values on PostNodeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PostNodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostNodeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PostNodeReqMultiError, or
// nil if none found.
func (m *PostNodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PostNodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		err := PostNodeReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetType() <= 0 {
		err := PostNodeReqValidationError{
			field:  "Type",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProperty() <= 0 {
		err := PostNodeReqValidationError{
			field:  "Property",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Desc != nil {

		if l := utf8.RuneCountInString(m.GetDesc()); l < 0 || l > 1024 {
			err := PostNodeReqValidationError{
				field:  "Desc",
				reason: "value length must be between 0 and 1024 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Config != nil {

		if l := utf8.RuneCountInString(m.GetConfig()); l < 0 || l > 4096 {
			err := PostNodeReqValidationError{
				field:  "Config",
				reason: "value length must be between 0 and 4096 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return PostNodeReqMultiError(errors)
	}

	return nil
}

// PostNodeReqMultiError is an error wrapping multiple validation errors
// returned by PostNodeReq.ValidateAll() if the designated constraints aren't met.
type PostNodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostNodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostNodeReqMultiError) AllErrors() []error { return m }

// PostNodeReqValidationError is the validation error returned by
// PostNodeReq.Validate if the designated constraints aren't met.
type PostNodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostNodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostNodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostNodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostNodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostNodeReqValidationError) ErrorName() string { return "PostNodeReqValidationError" }

// Error satisfies the builtin error interface
func (e PostNodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostNodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostNodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostNodeReqValidationError{}

// Validate checks the field values on GetNodeReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetNodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNodeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetNodeReqMultiError, or
// nil if none found.
func (m *GetNodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageIndex() <= 0 {
		err := GetNodeReqValidationError{
			field:  "PageIndex",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val >= 100 {
		err := GetNodeReqValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 100)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.SortBy != nil {

		if utf8.RuneCountInString(m.GetSortBy()) < 1 {
			err := GetNodeReqValidationError{
				field:  "SortBy",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.OrderBy != nil {

		if _, ok := _GetNodeReq_OrderBy_InLookup[m.GetOrderBy()]; !ok {
			err := GetNodeReqValidationError{
				field:  "OrderBy",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.NodeId != nil {

		if m.GetNodeId() <= 0 {
			err := GetNodeReqValidationError{
				field:  "NodeId",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetNodeReqMultiError(errors)
	}

	return nil
}

// GetNodeReqMultiError is an error wrapping multiple validation errors
// returned by GetNodeReq.ValidateAll() if the designated constraints aren't met.
type GetNodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNodeReqMultiError) AllErrors() []error { return m }

// GetNodeReqValidationError is the validation error returned by
// GetNodeReq.Validate if the designated constraints aren't met.
type GetNodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeReqValidationError) ErrorName() string { return "GetNodeReqValidationError" }

// Error satisfies the builtin error interface
func (e GetNodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeReqValidationError{}

var _GetNodeReq_OrderBy_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

// Validate checks the field values on GetNodeResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetNodeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNodeResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetNodeRespMultiError, or
// nil if none found.
func (m *GetNodeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNodeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNodeRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNodeRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNodeRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetNodeRespMultiError(errors)
	}

	return nil
}

// GetNodeRespMultiError is an error wrapping multiple validation errors
// returned by GetNodeResp.ValidateAll() if the designated constraints aren't met.
type GetNodeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNodeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNodeRespMultiError) AllErrors() []error { return m }

// GetNodeRespValidationError is the validation error returned by
// GetNodeResp.Validate if the designated constraints aren't met.
type GetNodeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeRespValidationError) ErrorName() string { return "GetNodeRespValidationError" }

// Error satisfies the builtin error interface
func (e GetNodeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeRespValidationError{}

// Validate checks the field values on GetNodeRespData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetNodeRespData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNodeRespData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNodeRespDataMultiError, or nil if none found.
func (m *GetNodeRespData) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNodeRespData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNodeRespDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNodeRespDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNodeRespDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetNodeRespDataMultiError(errors)
	}

	return nil
}

// GetNodeRespDataMultiError is an error wrapping multiple validation errors
// returned by GetNodeRespData.ValidateAll() if the designated constraints
// aren't met.
type GetNodeRespDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNodeRespDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNodeRespDataMultiError) AllErrors() []error { return m }

// GetNodeRespDataValidationError is the validation error returned by
// GetNodeRespData.Validate if the designated constraints aren't met.
type GetNodeRespDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeRespDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeRespDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeRespDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeRespDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeRespDataValidationError) ErrorName() string { return "GetNodeRespDataValidationError" }

// Error satisfies the builtin error interface
func (e GetNodeRespDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeRespData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeRespDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeRespDataValidationError{}

// Validate checks the field values on PutNodeReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PutNodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutNodeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PutNodeReqMultiError, or
// nil if none found.
func (m *PutNodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PutNodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetNodeId() <= 0 {
		err := PutNodeReqValidationError{
			field:  "NodeId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Name != nil {

		if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
			err := PutNodeReqValidationError{
				field:  "Name",
				reason: "value length must be between 1 and 64 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Desc != nil {

		if l := utf8.RuneCountInString(m.GetDesc()); l < 0 || l > 1024 {
			err := PutNodeReqValidationError{
				field:  "Desc",
				reason: "value length must be between 0 and 1024 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Type != nil {

		if m.GetType() <= 0 {
			err := PutNodeReqValidationError{
				field:  "Type",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Property != nil {

		if m.GetProperty() <= 0 {
			err := PutNodeReqValidationError{
				field:  "Property",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Status != nil {

		if m.GetStatus() < 0 {
			err := PutNodeReqValidationError{
				field:  "Status",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Config != nil {

		if l := utf8.RuneCountInString(m.GetConfig()); l < 0 || l > 4096 {
			err := PutNodeReqValidationError{
				field:  "Config",
				reason: "value length must be between 0 and 4096 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return PutNodeReqMultiError(errors)
	}

	return nil
}

// PutNodeReqMultiError is an error wrapping multiple validation errors
// returned by PutNodeReq.ValidateAll() if the designated constraints aren't met.
type PutNodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutNodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutNodeReqMultiError) AllErrors() []error { return m }

// PutNodeReqValidationError is the validation error returned by
// PutNodeReq.Validate if the designated constraints aren't met.
type PutNodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutNodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutNodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutNodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutNodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutNodeReqValidationError) ErrorName() string { return "PutNodeReqValidationError" }

// Error satisfies the builtin error interface
func (e PutNodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutNodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutNodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutNodeReqValidationError{}

// Validate checks the field values on GetTaskReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTaskReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTaskReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetTaskReqMultiError, or
// nil if none found.
func (m *GetTaskReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTaskReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageIndex() <= 0 {
		err := GetTaskReqValidationError{
			field:  "PageIndex",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val >= 100 {
		err := GetTaskReqValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 100)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.SortBy != nil {

		if utf8.RuneCountInString(m.GetSortBy()) < 1 {
			err := GetTaskReqValidationError{
				field:  "SortBy",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.OrderBy != nil {

		if _, ok := _GetTaskReq_OrderBy_InLookup[m.GetOrderBy()]; !ok {
			err := GetTaskReqValidationError{
				field:  "OrderBy",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.TaskId != nil {

		if m.GetTaskId() <= 0 {
			err := GetTaskReqValidationError{
				field:  "TaskId",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetTaskReqMultiError(errors)
	}

	return nil
}

// GetTaskReqMultiError is an error wrapping multiple validation errors
// returned by GetTaskReq.ValidateAll() if the designated constraints aren't met.
type GetTaskReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTaskReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTaskReqMultiError) AllErrors() []error { return m }

// GetTaskReqValidationError is the validation error returned by
// GetTaskReq.Validate if the designated constraints aren't met.
type GetTaskReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTaskReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTaskReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTaskReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTaskReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTaskReqValidationError) ErrorName() string { return "GetTaskReqValidationError" }

// Error satisfies the builtin error interface
func (e GetTaskReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTaskReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTaskReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTaskReqValidationError{}

var _GetTaskReq_OrderBy_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

// Validate checks the field values on GetTaskResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTaskResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTaskResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetTaskRespMultiError, or
// nil if none found.
func (m *GetTaskResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTaskResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTaskRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTaskRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTaskRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTaskRespMultiError(errors)
	}

	return nil
}

// GetTaskRespMultiError is an error wrapping multiple validation errors
// returned by GetTaskResp.ValidateAll() if the designated constraints aren't met.
type GetTaskRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTaskRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTaskRespMultiError) AllErrors() []error { return m }

// GetTaskRespValidationError is the validation error returned by
// GetTaskResp.Validate if the designated constraints aren't met.
type GetTaskRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTaskRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTaskRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTaskRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTaskRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTaskRespValidationError) ErrorName() string { return "GetTaskRespValidationError" }

// Error satisfies the builtin error interface
func (e GetTaskRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTaskResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTaskRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTaskRespValidationError{}

// Validate checks the field values on GetTaskRespData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTaskRespData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTaskRespData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTaskRespDataMultiError, or nil if none found.
func (m *GetTaskRespData) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTaskRespData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTaskRespDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTaskRespDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTaskRespDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTaskRespDataMultiError(errors)
	}

	return nil
}

// GetTaskRespDataMultiError is an error wrapping multiple validation errors
// returned by GetTaskRespData.ValidateAll() if the designated constraints
// aren't met.
type GetTaskRespDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTaskRespDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTaskRespDataMultiError) AllErrors() []error { return m }

// GetTaskRespDataValidationError is the validation error returned by
// GetTaskRespData.Validate if the designated constraints aren't met.
type GetTaskRespDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTaskRespDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTaskRespDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTaskRespDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTaskRespDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTaskRespDataValidationError) ErrorName() string { return "GetTaskRespDataValidationError" }

// Error satisfies the builtin error interface
func (e GetTaskRespDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTaskRespData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTaskRespDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTaskRespDataValidationError{}

// Validate checks the field values on TaskDetail with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TaskDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TaskDetailMultiError, or
// nil if none found.
func (m *TaskDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskDetailValidationError{
					field:  "Task",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskDetailValidationError{
					field:  "Task",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskDetailValidationError{
				field:  "Task",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetExecs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TaskDetailValidationError{
						field:  fmt.Sprintf("Execs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TaskDetailValidationError{
						field:  fmt.Sprintf("Execs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TaskDetailValidationError{
					field:  fmt.Sprintf("Execs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TaskDetailMultiError(errors)
	}

	return nil
}

// TaskDetailMultiError is an error wrapping multiple validation errors
// returned by TaskDetail.ValidateAll() if the designated constraints aren't met.
type TaskDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskDetailMultiError) AllErrors() []error { return m }

// TaskDetailValidationError is the validation error returned by
// TaskDetail.Validate if the designated constraints aren't met.
type TaskDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskDetailValidationError) ErrorName() string { return "TaskDetailValidationError" }

// Error satisfies the builtin error interface
func (e TaskDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskDetailValidationError{}

// Validate checks the field values on FinishTaskReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FinishTaskReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FinishTaskReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FinishTaskReqMultiError, or
// nil if none found.
func (m *FinishTaskReq) ValidateAll() error {
	return m.validate(true)
}

func (m *FinishTaskReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTaskId() <= 0 {
		err := FinishTaskReqValidationError{
			field:  "TaskId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetResult() < 0 {
		err := FinishTaskReqValidationError{
			field:  "Result",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Return != nil {

		if utf8.RuneCountInString(m.GetReturn()) < 0 {
			err := FinishTaskReqValidationError{
				field:  "Return",
				reason: "value length must be at least 0 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return FinishTaskReqMultiError(errors)
	}

	return nil
}

// FinishTaskReqMultiError is an error wrapping multiple validation errors
// returned by FinishTaskReq.ValidateAll() if the designated constraints
// aren't met.
type FinishTaskReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FinishTaskReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FinishTaskReqMultiError) AllErrors() []error { return m }

// FinishTaskReqValidationError is the validation error returned by
// FinishTaskReq.Validate if the designated constraints aren't met.
type FinishTaskReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FinishTaskReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FinishTaskReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FinishTaskReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FinishTaskReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FinishTaskReqValidationError) ErrorName() string { return "FinishTaskReqValidationError" }

// Error satisfies the builtin error interface
func (e FinishTaskReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFinishTaskReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FinishTaskReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FinishTaskReqValidationError{}

// Validate checks the field values on RetryTaskReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RetryTaskReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetryTaskReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RetryTaskReqMultiError, or
// nil if none found.
func (m *RetryTaskReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RetryTaskReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTaskId() <= 0 {
		err := RetryTaskReqValidationError{
			field:  "TaskId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RetryTaskReqMultiError(errors)
	}

	return nil
}

// RetryTaskReqMultiError is an error wrapping multiple validation errors
// returned by RetryTaskReq.ValidateAll() if the designated constraints aren't met.
type RetryTaskReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetryTaskReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetryTaskReqMultiError) AllErrors() []error { return m }

// RetryTaskReqValidationError is the validation error returned by
// RetryTaskReq.Validate if the designated constraints aren't met.
type RetryTaskReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetryTaskReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetryTaskReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetryTaskReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetryTaskReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetryTaskReqValidationError) ErrorName() string { return "RetryTaskReqValidationError" }

// Error satisfies the builtin error interface
func (e RetryTaskReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetryTaskReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetryTaskReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetryTaskReqValidationError{}

// Validate checks the field values on CancelTaskReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CancelTaskReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelTaskReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CancelTaskReqMultiError, or
// nil if none found.
func (m *CancelTaskReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelTaskReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTaskId() <= 0 {
		err := CancelTaskReqValidationError{
			field:  "TaskId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelTaskReqMultiError(errors)
	}

	return nil
}

// CancelTaskReqMultiError is an error wrapping multiple validation errors
// returned by CancelTaskReq.ValidateAll() if the designated constraints
// aren't met.
type CancelTaskReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelTaskReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelTaskReqMultiError) AllErrors() []error { return m }

// CancelTaskReqValidationError is the validation error returned by
// CancelTaskReq.Validate if the designated constraints aren't met.
type CancelTaskReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelTaskReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelTaskReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelTaskReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelTaskReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelTaskReqValidationError) ErrorName() string { return "CancelTaskReqValidationError" }

// Error satisfies the builtin error interface
func (e CancelTaskReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelTaskReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelTaskReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelTaskReqValidationError{}

// Validate checks the field values on PostConfigReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PostConfigReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostConfigReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PostConfigReqMultiError, or
// nil if none found.
func (m *PostConfigReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PostConfigReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetKey()); l < 1 || l > 64 {
		err := PostConfigReqValidationError{
			field:  "Key",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetValue()); l < 0 || l > 1024 {
		err := PostConfigReqValidationError{
			field:  "Value",
			reason: "value length must be between 0 and 1024 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Desc != nil {

		if l := utf8.RuneCountInString(m.GetDesc()); l < 0 || l > 1024 {
			err := PostConfigReqValidationError{
				field:  "Desc",
				reason: "value length must be between 0 and 1024 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return PostConfigReqMultiError(errors)
	}

	return nil
}

// PostConfigReqMultiError is an error wrapping multiple validation errors
// returned by PostConfigReq.ValidateAll() if the designated constraints
// aren't met.
type PostConfigReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostConfigReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostConfigReqMultiError) AllErrors() []error { return m }

// PostConfigReqValidationError is the validation error returned by
// PostConfigReq.Validate if the designated constraints aren't met.
type PostConfigReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostConfigReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostConfigReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostConfigReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostConfigReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostConfigReqValidationError) ErrorName() string { return "PostConfigReqValidationError" }

// Error satisfies the builtin error interface
func (e PostConfigReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostConfigReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostConfigReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostConfigReqValidationError{}

// Validate checks the field values on GetConfigReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetConfigReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfigReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetConfigReqMultiError, or
// nil if none found.
func (m *GetConfigReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfigReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageIndex() <= 0 {
		err := GetConfigReqValidationError{
			field:  "PageIndex",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val >= 100 {
		err := GetConfigReqValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 100)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.SortBy != nil {

		if utf8.RuneCountInString(m.GetSortBy()) < 1 {
			err := GetConfigReqValidationError{
				field:  "SortBy",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.OrderBy != nil {

		if _, ok := _GetConfigReq_OrderBy_InLookup[m.GetOrderBy()]; !ok {
			err := GetConfigReqValidationError{
				field:  "OrderBy",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Key != nil {

		if l := utf8.RuneCountInString(m.GetKey()); l < 1 || l > 64 {
			err := GetConfigReqValidationError{
				field:  "Key",
				reason: "value length must be between 1 and 64 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Status != nil {

		if m.GetStatus() < 0 {
			err := GetConfigReqValidationError{
				field:  "Status",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetConfigReqMultiError(errors)
	}

	return nil
}

// GetConfigReqMultiError is an error wrapping multiple validation errors
// returned by GetConfigReq.ValidateAll() if the designated constraints aren't met.
type GetConfigReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfigReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfigReqMultiError) AllErrors() []error { return m }

// GetConfigReqValidationError is the validation error returned by
// GetConfigReq.Validate if the designated constraints aren't met.
type GetConfigReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigReqValidationError) ErrorName() string { return "GetConfigReqValidationError" }

// Error satisfies the builtin error interface
func (e GetConfigReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigReqValidationError{}

var _GetConfigReq_OrderBy_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

// Validate checks the field values on GetConfigResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetConfigResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfigResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetConfigRespMultiError, or
// nil if none found.
func (m *GetConfigResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfigResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetConfigRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetConfigRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetConfigRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetConfigRespMultiError(errors)
	}

	return nil
}

// GetConfigRespMultiError is an error wrapping multiple validation errors
// returned by GetConfigResp.ValidateAll() if the designated constraints
// aren't met.
type GetConfigRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfigRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfigRespMultiError) AllErrors() []error { return m }

// GetConfigRespValidationError is the validation error returned by
// GetConfigResp.Validate if the designated constraints aren't met.
type GetConfigRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigRespValidationError) ErrorName() string { return "GetConfigRespValidationError" }

// Error satisfies the builtin error interface
func (e GetConfigRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigRespValidationError{}

// Validate checks the field values on GetConfigRespData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetConfigRespData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfigRespData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConfigRespDataMultiError, or nil if none found.
func (m *GetConfigRespData) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfigRespData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetConfigRespDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetConfigRespDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetConfigRespDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetConfigRespDataMultiError(errors)
	}

	return nil
}

// GetConfigRespDataMultiError is an error wrapping multiple validation errors
// returned by GetConfigRespData.ValidateAll() if the designated constraints
// aren't met.
type GetConfigRespDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfigRespDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfigRespDataMultiError) AllErrors() []error { return m }

// GetConfigRespDataValidationError is the validation error returned by
// GetConfigRespData.Validate if the designated constraints aren't met.
type GetConfigRespDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigRespDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigRespDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigRespDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigRespDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigRespDataValidationError) ErrorName() string {
	return "GetConfigRespDataValidationError"
}

// Error satisfies the builtin error interface
func (e GetConfigRespDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigRespData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigRespDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigRespDataValidationError{}

// Validate checks the field values on PutConfigReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PutConfigReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutConfigReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PutConfigReqMultiError, or
// nil if none found.
func (m *PutConfigReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PutConfigReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetKey()); l < 1 || l > 64 {
		err := PutConfigReqValidationError{
			field:  "Key",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Value != nil {

		if l := utf8.RuneCountInString(m.GetValue()); l < 0 || l > 1024 {
			err := PutConfigReqValidationError{
				field:  "Value",
				reason: "value length must be between 0 and 1024 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Status != nil {

		if m.GetStatus() < 0 {
			err := PutConfigReqValidationError{
				field:  "Status",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Desc != nil {

		if l := utf8.RuneCountInString(m.GetDesc()); l < 0 || l > 1024 {
			err := PutConfigReqValidationError{
				field:  "Desc",
				reason: "value length must be between 0 and 1024 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return PutConfigReqMultiError(errors)
	}

	return nil
}

// PutConfigReqMultiError is an error wrapping multiple validation errors
// returned by PutConfigReq.ValidateAll() if the designated constraints aren't met.
type PutConfigReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutConfigReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutConfigReqMultiError) AllErrors() []error { return m }

// PutConfigReqValidationError is the validation error returned by
// PutConfigReq.Validate if the designated constraints aren't met.
type PutConfigReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutConfigReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutConfigReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutConfigReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutConfigReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutConfigReqValidationError) ErrorName() string { return "PutConfigReqValidationError" }

// Error satisfies the builtin error interface
func (e PutConfigReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutConfigReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutConfigReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutConfigReqValidationError{}
