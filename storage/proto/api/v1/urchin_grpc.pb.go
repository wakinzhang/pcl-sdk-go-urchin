// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.0
// source: api/v1/urchin.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Object_UploadObject_FullMethodName                           = "/pcl.sdk.go.urchin.proto.api.v1.Object/UploadObject"
	Object_CreateInitiateMultipartUploadSignedUrl_FullMethodName = "/pcl.sdk.go.urchin.proto.api.v1.Object/CreateInitiateMultipartUploadSignedUrl"
	Object_CreateUploadPartSignedUrl_FullMethodName              = "/pcl.sdk.go.urchin.proto.api.v1.Object/CreateUploadPartSignedUrl"
	Object_CreateCompleteMultipartUploadSignedUrl_FullMethodName = "/pcl.sdk.go.urchin.proto.api.v1.Object/CreateCompleteMultipartUploadSignedUrl"
	Object_CreateNewFolderSignedUrl_FullMethodName               = "/pcl.sdk.go.urchin.proto.api.v1.Object/CreateNewFolderSignedUrl"
	Object_DownloadObject_FullMethodName                         = "/pcl.sdk.go.urchin.proto.api.v1.Object/DownloadObject"
	Object_CreateGetObjectSignedUrl_FullMethodName               = "/pcl.sdk.go.urchin.proto.api.v1.Object/CreateGetObjectSignedUrl"
	Object_CreateListObjectsSignedUrl_FullMethodName             = "/pcl.sdk.go.urchin.proto.api.v1.Object/CreateListObjectsSignedUrl"
	Object_MigrateObject_FullMethodName                          = "/pcl.sdk.go.urchin.proto.api.v1.Object/MigrateObject"
	Object_GetObject_FullMethodName                              = "/pcl.sdk.go.urchin.proto.api.v1.Object/GetObject"
	Object_DeleteObject_FullMethodName                           = "/pcl.sdk.go.urchin.proto.api.v1.Object/DeleteObject"
	Object_PutObject_FullMethodName                              = "/pcl.sdk.go.urchin.proto.api.v1.Object/PutObject"
)

// ObjectClient is the client API for Object service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObjectClient interface {
	// 上传数据对象
	UploadObject(ctx context.Context, in *UploadObjectReq, opts ...grpc.CallOption) (*UploadObjectResp, error)
	// 创建初始化上传段任务签名url
	CreateInitiateMultipartUploadSignedUrl(ctx context.Context, in *CreateInitiateMultipartUploadSignedUrlReq, opts ...grpc.CallOption) (*CreateSignedUrlResp, error)
	// 创建分段上传签名url
	CreateUploadPartSignedUrl(ctx context.Context, in *CreateUploadPartSignedUrlReq, opts ...grpc.CallOption) (*CreateSignedUrlResp, error)
	// 创建合并分段上传签名url
	CreateCompleteMultipartUploadSignedUrl(ctx context.Context, in *CreateCompleteMultipartUploadSignedUrlReq, opts ...grpc.CallOption) (*CreateSignedUrlResp, error)
	// 创建文件夹上传签名url
	CreateNewFolderSignedUrl(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CreateSignedUrlResp, error)
	// 下载数据对象
	DownloadObject(ctx context.Context, in *DownloadObjectReq, opts ...grpc.CallOption) (*DownloadObjectResp, error)
	// 创建下载对象签名url
	CreateGetObjectSignedUrl(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CreateSignedUrlResp, error)
	// 创建列举对象签名url
	CreateListObjectsSignedUrl(ctx context.Context, in *CreateListObjectsSignedUrlReq, opts ...grpc.CallOption) (*CreateSignedUrlResp, error)
	// 迁移数据对象
	MigrateObject(ctx context.Context, in *MigrateObjectReq, opts ...grpc.CallOption) (*MigrateObjectResp, error)
	// 查询数据对象
	GetObject(ctx context.Context, in *GetObjectReq, opts ...grpc.CallOption) (*GetObjectResp, error)
	// 删除数据对象
	DeleteObject(ctx context.Context, in *DeleteObjectReq, opts ...grpc.CallOption) (*DeleteObjectResp, error)
	// 修改数据对象
	PutObject(ctx context.Context, in *PutObjectReq, opts ...grpc.CallOption) (*BaseResp, error)
}

type objectClient struct {
	cc grpc.ClientConnInterface
}

func NewObjectClient(cc grpc.ClientConnInterface) ObjectClient {
	return &objectClient{cc}
}

func (c *objectClient) UploadObject(ctx context.Context, in *UploadObjectReq, opts ...grpc.CallOption) (*UploadObjectResp, error) {
	out := new(UploadObjectResp)
	err := c.cc.Invoke(ctx, Object_UploadObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectClient) CreateInitiateMultipartUploadSignedUrl(ctx context.Context, in *CreateInitiateMultipartUploadSignedUrlReq, opts ...grpc.CallOption) (*CreateSignedUrlResp, error) {
	out := new(CreateSignedUrlResp)
	err := c.cc.Invoke(ctx, Object_CreateInitiateMultipartUploadSignedUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectClient) CreateUploadPartSignedUrl(ctx context.Context, in *CreateUploadPartSignedUrlReq, opts ...grpc.CallOption) (*CreateSignedUrlResp, error) {
	out := new(CreateSignedUrlResp)
	err := c.cc.Invoke(ctx, Object_CreateUploadPartSignedUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectClient) CreateCompleteMultipartUploadSignedUrl(ctx context.Context, in *CreateCompleteMultipartUploadSignedUrlReq, opts ...grpc.CallOption) (*CreateSignedUrlResp, error) {
	out := new(CreateSignedUrlResp)
	err := c.cc.Invoke(ctx, Object_CreateCompleteMultipartUploadSignedUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectClient) CreateNewFolderSignedUrl(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CreateSignedUrlResp, error) {
	out := new(CreateSignedUrlResp)
	err := c.cc.Invoke(ctx, Object_CreateNewFolderSignedUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectClient) DownloadObject(ctx context.Context, in *DownloadObjectReq, opts ...grpc.CallOption) (*DownloadObjectResp, error) {
	out := new(DownloadObjectResp)
	err := c.cc.Invoke(ctx, Object_DownloadObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectClient) CreateGetObjectSignedUrl(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CreateSignedUrlResp, error) {
	out := new(CreateSignedUrlResp)
	err := c.cc.Invoke(ctx, Object_CreateGetObjectSignedUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectClient) CreateListObjectsSignedUrl(ctx context.Context, in *CreateListObjectsSignedUrlReq, opts ...grpc.CallOption) (*CreateSignedUrlResp, error) {
	out := new(CreateSignedUrlResp)
	err := c.cc.Invoke(ctx, Object_CreateListObjectsSignedUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectClient) MigrateObject(ctx context.Context, in *MigrateObjectReq, opts ...grpc.CallOption) (*MigrateObjectResp, error) {
	out := new(MigrateObjectResp)
	err := c.cc.Invoke(ctx, Object_MigrateObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectClient) GetObject(ctx context.Context, in *GetObjectReq, opts ...grpc.CallOption) (*GetObjectResp, error) {
	out := new(GetObjectResp)
	err := c.cc.Invoke(ctx, Object_GetObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectClient) DeleteObject(ctx context.Context, in *DeleteObjectReq, opts ...grpc.CallOption) (*DeleteObjectResp, error) {
	out := new(DeleteObjectResp)
	err := c.cc.Invoke(ctx, Object_DeleteObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectClient) PutObject(ctx context.Context, in *PutObjectReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Object_PutObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObjectServer is the server API for Object service.
// All implementations must embed UnimplementedObjectServer
// for forward compatibility
type ObjectServer interface {
	// 上传数据对象
	UploadObject(context.Context, *UploadObjectReq) (*UploadObjectResp, error)
	// 创建初始化上传段任务签名url
	CreateInitiateMultipartUploadSignedUrl(context.Context, *CreateInitiateMultipartUploadSignedUrlReq) (*CreateSignedUrlResp, error)
	// 创建分段上传签名url
	CreateUploadPartSignedUrl(context.Context, *CreateUploadPartSignedUrlReq) (*CreateSignedUrlResp, error)
	// 创建合并分段上传签名url
	CreateCompleteMultipartUploadSignedUrl(context.Context, *CreateCompleteMultipartUploadSignedUrlReq) (*CreateSignedUrlResp, error)
	// 创建文件夹上传签名url
	CreateNewFolderSignedUrl(context.Context, *emptypb.Empty) (*CreateSignedUrlResp, error)
	// 下载数据对象
	DownloadObject(context.Context, *DownloadObjectReq) (*DownloadObjectResp, error)
	// 创建下载对象签名url
	CreateGetObjectSignedUrl(context.Context, *emptypb.Empty) (*CreateSignedUrlResp, error)
	// 创建列举对象签名url
	CreateListObjectsSignedUrl(context.Context, *CreateListObjectsSignedUrlReq) (*CreateSignedUrlResp, error)
	// 迁移数据对象
	MigrateObject(context.Context, *MigrateObjectReq) (*MigrateObjectResp, error)
	// 查询数据对象
	GetObject(context.Context, *GetObjectReq) (*GetObjectResp, error)
	// 删除数据对象
	DeleteObject(context.Context, *DeleteObjectReq) (*DeleteObjectResp, error)
	// 修改数据对象
	PutObject(context.Context, *PutObjectReq) (*BaseResp, error)
	mustEmbedUnimplementedObjectServer()
}

// UnimplementedObjectServer must be embedded to have forward compatible implementations.
type UnimplementedObjectServer struct {
}

func (UnimplementedObjectServer) UploadObject(context.Context, *UploadObjectReq) (*UploadObjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadObject not implemented")
}
func (UnimplementedObjectServer) CreateInitiateMultipartUploadSignedUrl(context.Context, *CreateInitiateMultipartUploadSignedUrlReq) (*CreateSignedUrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInitiateMultipartUploadSignedUrl not implemented")
}
func (UnimplementedObjectServer) CreateUploadPartSignedUrl(context.Context, *CreateUploadPartSignedUrlReq) (*CreateSignedUrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUploadPartSignedUrl not implemented")
}
func (UnimplementedObjectServer) CreateCompleteMultipartUploadSignedUrl(context.Context, *CreateCompleteMultipartUploadSignedUrlReq) (*CreateSignedUrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompleteMultipartUploadSignedUrl not implemented")
}
func (UnimplementedObjectServer) CreateNewFolderSignedUrl(context.Context, *emptypb.Empty) (*CreateSignedUrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewFolderSignedUrl not implemented")
}
func (UnimplementedObjectServer) DownloadObject(context.Context, *DownloadObjectReq) (*DownloadObjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadObject not implemented")
}
func (UnimplementedObjectServer) CreateGetObjectSignedUrl(context.Context, *emptypb.Empty) (*CreateSignedUrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGetObjectSignedUrl not implemented")
}
func (UnimplementedObjectServer) CreateListObjectsSignedUrl(context.Context, *CreateListObjectsSignedUrlReq) (*CreateSignedUrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateListObjectsSignedUrl not implemented")
}
func (UnimplementedObjectServer) MigrateObject(context.Context, *MigrateObjectReq) (*MigrateObjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateObject not implemented")
}
func (UnimplementedObjectServer) GetObject(context.Context, *GetObjectReq) (*GetObjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObject not implemented")
}
func (UnimplementedObjectServer) DeleteObject(context.Context, *DeleteObjectReq) (*DeleteObjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}
func (UnimplementedObjectServer) PutObject(context.Context, *PutObjectReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutObject not implemented")
}
func (UnimplementedObjectServer) mustEmbedUnimplementedObjectServer() {}

// UnsafeObjectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObjectServer will
// result in compilation errors.
type UnsafeObjectServer interface {
	mustEmbedUnimplementedObjectServer()
}

func RegisterObjectServer(s grpc.ServiceRegistrar, srv ObjectServer) {
	s.RegisterService(&Object_ServiceDesc, srv)
}

func _Object_UploadObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServer).UploadObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Object_UploadObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServer).UploadObject(ctx, req.(*UploadObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Object_CreateInitiateMultipartUploadSignedUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInitiateMultipartUploadSignedUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServer).CreateInitiateMultipartUploadSignedUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Object_CreateInitiateMultipartUploadSignedUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServer).CreateInitiateMultipartUploadSignedUrl(ctx, req.(*CreateInitiateMultipartUploadSignedUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Object_CreateUploadPartSignedUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUploadPartSignedUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServer).CreateUploadPartSignedUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Object_CreateUploadPartSignedUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServer).CreateUploadPartSignedUrl(ctx, req.(*CreateUploadPartSignedUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Object_CreateCompleteMultipartUploadSignedUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompleteMultipartUploadSignedUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServer).CreateCompleteMultipartUploadSignedUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Object_CreateCompleteMultipartUploadSignedUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServer).CreateCompleteMultipartUploadSignedUrl(ctx, req.(*CreateCompleteMultipartUploadSignedUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Object_CreateNewFolderSignedUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServer).CreateNewFolderSignedUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Object_CreateNewFolderSignedUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServer).CreateNewFolderSignedUrl(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Object_DownloadObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServer).DownloadObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Object_DownloadObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServer).DownloadObject(ctx, req.(*DownloadObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Object_CreateGetObjectSignedUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServer).CreateGetObjectSignedUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Object_CreateGetObjectSignedUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServer).CreateGetObjectSignedUrl(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Object_CreateListObjectsSignedUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateListObjectsSignedUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServer).CreateListObjectsSignedUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Object_CreateListObjectsSignedUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServer).CreateListObjectsSignedUrl(ctx, req.(*CreateListObjectsSignedUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Object_MigrateObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrateObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServer).MigrateObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Object_MigrateObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServer).MigrateObject(ctx, req.(*MigrateObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Object_GetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServer).GetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Object_GetObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServer).GetObject(ctx, req.(*GetObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Object_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Object_DeleteObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServer).DeleteObject(ctx, req.(*DeleteObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Object_PutObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServer).PutObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Object_PutObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServer).PutObject(ctx, req.(*PutObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Object_ServiceDesc is the grpc.ServiceDesc for Object service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Object_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pcl.sdk.go.urchin.proto.api.v1.Object",
	HandlerType: (*ObjectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadObject",
			Handler:    _Object_UploadObject_Handler,
		},
		{
			MethodName: "CreateInitiateMultipartUploadSignedUrl",
			Handler:    _Object_CreateInitiateMultipartUploadSignedUrl_Handler,
		},
		{
			MethodName: "CreateUploadPartSignedUrl",
			Handler:    _Object_CreateUploadPartSignedUrl_Handler,
		},
		{
			MethodName: "CreateCompleteMultipartUploadSignedUrl",
			Handler:    _Object_CreateCompleteMultipartUploadSignedUrl_Handler,
		},
		{
			MethodName: "CreateNewFolderSignedUrl",
			Handler:    _Object_CreateNewFolderSignedUrl_Handler,
		},
		{
			MethodName: "DownloadObject",
			Handler:    _Object_DownloadObject_Handler,
		},
		{
			MethodName: "CreateGetObjectSignedUrl",
			Handler:    _Object_CreateGetObjectSignedUrl_Handler,
		},
		{
			MethodName: "CreateListObjectsSignedUrl",
			Handler:    _Object_CreateListObjectsSignedUrl_Handler,
		},
		{
			MethodName: "MigrateObject",
			Handler:    _Object_MigrateObject_Handler,
		},
		{
			MethodName: "GetObject",
			Handler:    _Object_GetObject_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _Object_DeleteObject_Handler,
		},
		{
			MethodName: "PutObject",
			Handler:    _Object_PutObject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/urchin.proto",
}

const (
	Node_PostNode_FullMethodName = "/pcl.sdk.go.urchin.proto.api.v1.Node/PostNode"
	Node_GetNode_FullMethodName  = "/pcl.sdk.go.urchin.proto.api.v1.Node/GetNode"
	Node_PutNode_FullMethodName  = "/pcl.sdk.go.urchin.proto.api.v1.Node/PutNode"
)

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeClient interface {
	// 添加分中心
	PostNode(ctx context.Context, in *PostNodeReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 查询分中心
	GetNode(ctx context.Context, in *GetNodeReq, opts ...grpc.CallOption) (*GetNodeResp, error)
	// 修改分中心
	PutNode(ctx context.Context, in *PutNodeReq, opts ...grpc.CallOption) (*BaseResp, error)
}

type nodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeClient(cc grpc.ClientConnInterface) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) PostNode(ctx context.Context, in *PostNodeReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Node_PostNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetNode(ctx context.Context, in *GetNodeReq, opts ...grpc.CallOption) (*GetNodeResp, error) {
	out := new(GetNodeResp)
	err := c.cc.Invoke(ctx, Node_GetNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) PutNode(ctx context.Context, in *PutNodeReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Node_PutNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServer is the server API for Node service.
// All implementations must embed UnimplementedNodeServer
// for forward compatibility
type NodeServer interface {
	// 添加分中心
	PostNode(context.Context, *PostNodeReq) (*BaseResp, error)
	// 查询分中心
	GetNode(context.Context, *GetNodeReq) (*GetNodeResp, error)
	// 修改分中心
	PutNode(context.Context, *PutNodeReq) (*BaseResp, error)
	mustEmbedUnimplementedNodeServer()
}

// UnimplementedNodeServer must be embedded to have forward compatible implementations.
type UnimplementedNodeServer struct {
}

func (UnimplementedNodeServer) PostNode(context.Context, *PostNodeReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostNode not implemented")
}
func (UnimplementedNodeServer) GetNode(context.Context, *GetNodeReq) (*GetNodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedNodeServer) PutNode(context.Context, *PutNodeReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutNode not implemented")
}
func (UnimplementedNodeServer) mustEmbedUnimplementedNodeServer() {}

// UnsafeNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServer will
// result in compilation errors.
type UnsafeNodeServer interface {
	mustEmbedUnimplementedNodeServer()
}

func RegisterNodeServer(s grpc.ServiceRegistrar, srv NodeServer) {
	s.RegisterService(&Node_ServiceDesc, srv)
}

func _Node_PostNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).PostNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_PostNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).PostNode(ctx, req.(*PostNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetNode(ctx, req.(*GetNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_PutNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).PutNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_PutNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).PutNode(ctx, req.(*PutNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Node_ServiceDesc is the grpc.ServiceDesc for Node service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Node_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pcl.sdk.go.urchin.proto.api.v1.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostNode",
			Handler:    _Node_PostNode_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _Node_GetNode_Handler,
		},
		{
			MethodName: "PutNode",
			Handler:    _Node_PutNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/urchin.proto",
}

const (
	Task_GetTask_FullMethodName    = "/pcl.sdk.go.urchin.proto.api.v1.Task/GetTask"
	Task_FinishTask_FullMethodName = "/pcl.sdk.go.urchin.proto.api.v1.Task/FinishTask"
	Task_RetryTask_FullMethodName  = "/pcl.sdk.go.urchin.proto.api.v1.Task/RetryTask"
	Task_CancelTask_FullMethodName = "/pcl.sdk.go.urchin.proto.api.v1.Task/CancelTask"
)

// TaskClient is the client API for Task service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskClient interface {
	// 查询任务
	GetTask(ctx context.Context, in *GetTaskReq, opts ...grpc.CallOption) (*GetTaskResp, error)
	// 任务完成
	FinishTask(ctx context.Context, in *FinishTaskReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 任务重试
	RetryTask(ctx context.Context, in *RetryTaskReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 任务取消
	CancelTask(ctx context.Context, in *CancelTaskReq, opts ...grpc.CallOption) (*BaseResp, error)
}

type taskClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskClient(cc grpc.ClientConnInterface) TaskClient {
	return &taskClient{cc}
}

func (c *taskClient) GetTask(ctx context.Context, in *GetTaskReq, opts ...grpc.CallOption) (*GetTaskResp, error) {
	out := new(GetTaskResp)
	err := c.cc.Invoke(ctx, Task_GetTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) FinishTask(ctx context.Context, in *FinishTaskReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Task_FinishTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) RetryTask(ctx context.Context, in *RetryTaskReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Task_RetryTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) CancelTask(ctx context.Context, in *CancelTaskReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Task_CancelTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServer is the server API for Task service.
// All implementations must embed UnimplementedTaskServer
// for forward compatibility
type TaskServer interface {
	// 查询任务
	GetTask(context.Context, *GetTaskReq) (*GetTaskResp, error)
	// 任务完成
	FinishTask(context.Context, *FinishTaskReq) (*BaseResp, error)
	// 任务重试
	RetryTask(context.Context, *RetryTaskReq) (*BaseResp, error)
	// 任务取消
	CancelTask(context.Context, *CancelTaskReq) (*BaseResp, error)
	mustEmbedUnimplementedTaskServer()
}

// UnimplementedTaskServer must be embedded to have forward compatible implementations.
type UnimplementedTaskServer struct {
}

func (UnimplementedTaskServer) GetTask(context.Context, *GetTaskReq) (*GetTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedTaskServer) FinishTask(context.Context, *FinishTaskReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishTask not implemented")
}
func (UnimplementedTaskServer) RetryTask(context.Context, *RetryTaskReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryTask not implemented")
}
func (UnimplementedTaskServer) CancelTask(context.Context, *CancelTaskReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTask not implemented")
}
func (UnimplementedTaskServer) mustEmbedUnimplementedTaskServer() {}

// UnsafeTaskServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServer will
// result in compilation errors.
type UnsafeTaskServer interface {
	mustEmbedUnimplementedTaskServer()
}

func RegisterTaskServer(s grpc.ServiceRegistrar, srv TaskServer) {
	s.RegisterService(&Task_ServiceDesc, srv)
}

func _Task_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetTask(ctx, req.(*GetTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_FinishTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).FinishTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_FinishTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).FinishTask(ctx, req.(*FinishTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_RetryTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).RetryTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_RetryTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).RetryTask(ctx, req.(*RetryTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_CancelTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).CancelTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_CancelTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).CancelTask(ctx, req.(*CancelTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Task_ServiceDesc is the grpc.ServiceDesc for Task service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Task_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pcl.sdk.go.urchin.proto.api.v1.Task",
	HandlerType: (*TaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTask",
			Handler:    _Task_GetTask_Handler,
		},
		{
			MethodName: "FinishTask",
			Handler:    _Task_FinishTask_Handler,
		},
		{
			MethodName: "RetryTask",
			Handler:    _Task_RetryTask_Handler,
		},
		{
			MethodName: "CancelTask",
			Handler:    _Task_CancelTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/urchin.proto",
}

const (
	Config_PostConfig_FullMethodName = "/pcl.sdk.go.urchin.proto.api.v1.Config/PostConfig"
	Config_GetConfig_FullMethodName  = "/pcl.sdk.go.urchin.proto.api.v1.Config/GetConfig"
	Config_PutConfig_FullMethodName  = "/pcl.sdk.go.urchin.proto.api.v1.Config/PutConfig"
)

// ConfigClient is the client API for Config service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigClient interface {
	// 添加
	PostConfig(ctx context.Context, in *PostConfigReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 查询
	GetConfig(ctx context.Context, in *GetConfigReq, opts ...grpc.CallOption) (*GetConfigResp, error)
	// 修改
	PutConfig(ctx context.Context, in *PutConfigReq, opts ...grpc.CallOption) (*BaseResp, error)
}

type configClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigClient(cc grpc.ClientConnInterface) ConfigClient {
	return &configClient{cc}
}

func (c *configClient) PostConfig(ctx context.Context, in *PostConfigReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Config_PostConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetConfig(ctx context.Context, in *GetConfigReq, opts ...grpc.CallOption) (*GetConfigResp, error) {
	out := new(GetConfigResp)
	err := c.cc.Invoke(ctx, Config_GetConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) PutConfig(ctx context.Context, in *PutConfigReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Config_PutConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServer is the server API for Config service.
// All implementations must embed UnimplementedConfigServer
// for forward compatibility
type ConfigServer interface {
	// 添加
	PostConfig(context.Context, *PostConfigReq) (*BaseResp, error)
	// 查询
	GetConfig(context.Context, *GetConfigReq) (*GetConfigResp, error)
	// 修改
	PutConfig(context.Context, *PutConfigReq) (*BaseResp, error)
	mustEmbedUnimplementedConfigServer()
}

// UnimplementedConfigServer must be embedded to have forward compatible implementations.
type UnimplementedConfigServer struct {
}

func (UnimplementedConfigServer) PostConfig(context.Context, *PostConfigReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostConfig not implemented")
}
func (UnimplementedConfigServer) GetConfig(context.Context, *GetConfigReq) (*GetConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedConfigServer) PutConfig(context.Context, *PutConfigReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutConfig not implemented")
}
func (UnimplementedConfigServer) mustEmbedUnimplementedConfigServer() {}

// UnsafeConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigServer will
// result in compilation errors.
type UnsafeConfigServer interface {
	mustEmbedUnimplementedConfigServer()
}

func RegisterConfigServer(s grpc.ServiceRegistrar, srv ConfigServer) {
	s.RegisterService(&Config_ServiceDesc, srv)
}

func _Config_PostConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).PostConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_PostConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).PostConfig(ctx, req.(*PostConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetConfig(ctx, req.(*GetConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_PutConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).PutConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_PutConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).PutConfig(ctx, req.(*PutConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Config_ServiceDesc is the grpc.ServiceDesc for Config service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Config_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pcl.sdk.go.urchin.proto.api.v1.Config",
	HandlerType: (*ConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostConfig",
			Handler:    _Config_PostConfig_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _Config_GetConfig_Handler,
		},
		{
			MethodName: "PutConfig",
			Handler:    _Config_PutConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/urchin.proto",
}
