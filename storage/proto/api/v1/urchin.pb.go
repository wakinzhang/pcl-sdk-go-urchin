// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: api/v1/urchin.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	module "pcl-sdk-go-urchin/storage/proto/module"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BaseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"code"
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// @inject_tag: json:"message"
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
}

func (x *BaseResp) Reset() {
	*x = BaseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseResp) ProtoMessage() {}

func (x *BaseResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseResp.ProtoReflect.Descriptor instead.
func (*BaseResp) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{0}
}

func (x *BaseResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BaseResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UploadObjectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"user_id"
	UserId string `protobuf:"bytes,1,opt,name=user_id,proto3" json:"user_id"`
	// @inject_tag: json:"name"
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	// @inject_tag: json:"type"
	Type int32 `protobuf:"varint,3,opt,name=type,proto3" json:"type"`
	// @inject_tag: json:"size"
	Size int32 `protobuf:"varint,4,opt,name=size,proto3" json:"size"`
	// @inject_tag: json:"desc"
	Desc *string `protobuf:"bytes,5,opt,name=desc,proto3,oneof" json:"desc"`
	// @inject_tag: json:"node_id"
	NodeId *int32 `protobuf:"varint,6,opt,name=node_id,proto3,oneof" json:"node_id"`
}

func (x *UploadObjectReq) Reset() {
	*x = UploadObjectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadObjectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadObjectReq) ProtoMessage() {}

func (x *UploadObjectReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadObjectReq.ProtoReflect.Descriptor instead.
func (*UploadObjectReq) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{1}
}

func (x *UploadObjectReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UploadObjectReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UploadObjectReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *UploadObjectReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *UploadObjectReq) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *UploadObjectReq) GetNodeId() int32 {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return 0
}

type UploadObjectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"code"
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// @inject_tag: json:"message"
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	// @inject_tag: json:"task_id"
	TaskId int32 `protobuf:"varint,3,opt,name=task_id,proto3" json:"task_id"`
	// @inject_tag: json:"node_type"
	NodeType int32 `protobuf:"varint,4,opt,name=node_type,proto3" json:"node_type"`
}

func (x *UploadObjectResp) Reset() {
	*x = UploadObjectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadObjectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadObjectResp) ProtoMessage() {}

func (x *UploadObjectResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadObjectResp.ProtoReflect.Descriptor instead.
func (*UploadObjectResp) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{2}
}

func (x *UploadObjectResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UploadObjectResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UploadObjectResp) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *UploadObjectResp) GetNodeType() int32 {
	if x != nil {
		return x.NodeType
	}
	return 0
}

type CreateInitiateMultipartUploadSignedUrlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"task_id"
	TaskId int32 `protobuf:"varint,1,opt,name=task_id,proto3" json:"task_id"`
}

func (x *CreateInitiateMultipartUploadSignedUrlReq) Reset() {
	*x = CreateInitiateMultipartUploadSignedUrlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInitiateMultipartUploadSignedUrlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInitiateMultipartUploadSignedUrlReq) ProtoMessage() {}

func (x *CreateInitiateMultipartUploadSignedUrlReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInitiateMultipartUploadSignedUrlReq.ProtoReflect.Descriptor instead.
func (*CreateInitiateMultipartUploadSignedUrlReq) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{3}
}

func (x *CreateInitiateMultipartUploadSignedUrlReq) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type CreateUploadPartSignedUrlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"upload_id"
	UploadId string `protobuf:"bytes,1,opt,name=upload_id,proto3" json:"upload_id"`
	// @inject_tag: json:"part_number"
	PartNumber int32 `protobuf:"varint,2,opt,name=part_number,proto3" json:"part_number"`
	// @inject_tag: json:"task_id"
	TaskId int32 `protobuf:"varint,3,opt,name=task_id,proto3" json:"task_id"`
}

func (x *CreateUploadPartSignedUrlReq) Reset() {
	*x = CreateUploadPartSignedUrlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUploadPartSignedUrlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUploadPartSignedUrlReq) ProtoMessage() {}

func (x *CreateUploadPartSignedUrlReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUploadPartSignedUrlReq.ProtoReflect.Descriptor instead.
func (*CreateUploadPartSignedUrlReq) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{4}
}

func (x *CreateUploadPartSignedUrlReq) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

func (x *CreateUploadPartSignedUrlReq) GetPartNumber() int32 {
	if x != nil {
		return x.PartNumber
	}
	return 0
}

func (x *CreateUploadPartSignedUrlReq) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type CreateCompleteMultipartUploadSignedUrlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"upload_id"
	UploadId string `protobuf:"bytes,1,opt,name=upload_id,proto3" json:"upload_id"`
	// @inject_tag: json:"task_id"
	TaskId int32 `protobuf:"varint,2,opt,name=task_id,proto3" json:"task_id"`
}

func (x *CreateCompleteMultipartUploadSignedUrlReq) Reset() {
	*x = CreateCompleteMultipartUploadSignedUrlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCompleteMultipartUploadSignedUrlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCompleteMultipartUploadSignedUrlReq) ProtoMessage() {}

func (x *CreateCompleteMultipartUploadSignedUrlReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCompleteMultipartUploadSignedUrlReq.ProtoReflect.Descriptor instead.
func (*CreateCompleteMultipartUploadSignedUrlReq) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{5}
}

func (x *CreateCompleteMultipartUploadSignedUrlReq) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

func (x *CreateCompleteMultipartUploadSignedUrlReq) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type CreateSignedUrlResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"code"
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// @inject_tag: json:"message"
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	// @inject_tag: json:"signed_url"
	SignedUrl string `protobuf:"bytes,3,opt,name=signed_url,proto3" json:"signed_url"`
	// @inject_tag: json:"header"
	Header map[string]*HeaderValues `protobuf:"bytes,4,rep,name=header,proto3" json:"header" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateSignedUrlResp) Reset() {
	*x = CreateSignedUrlResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSignedUrlResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSignedUrlResp) ProtoMessage() {}

func (x *CreateSignedUrlResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSignedUrlResp.ProtoReflect.Descriptor instead.
func (*CreateSignedUrlResp) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{6}
}

func (x *CreateSignedUrlResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateSignedUrlResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateSignedUrlResp) GetSignedUrl() string {
	if x != nil {
		return x.SignedUrl
	}
	return ""
}

func (x *CreateSignedUrlResp) GetHeader() map[string]*HeaderValues {
	if x != nil {
		return x.Header
	}
	return nil
}

type HeaderValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"values"
	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values"`
}

func (x *HeaderValues) Reset() {
	*x = HeaderValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderValues) ProtoMessage() {}

func (x *HeaderValues) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderValues.ProtoReflect.Descriptor instead.
func (*HeaderValues) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{7}
}

func (x *HeaderValues) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type DownloadObjectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"user_id"
	UserId string `protobuf:"bytes,1,opt,name=user_id,proto3" json:"user_id"`
	// @inject_tag: json:"obj_uuid"
	ObjUuid string `protobuf:"bytes,2,opt,name=obj_uuid,proto3" json:"obj_uuid"`
	// @inject_tag: json:"node_id"
	NodeId *int32 `protobuf:"varint,3,opt,name=node_id,proto3,oneof" json:"node_id"`
}

func (x *DownloadObjectReq) Reset() {
	*x = DownloadObjectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadObjectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadObjectReq) ProtoMessage() {}

func (x *DownloadObjectReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadObjectReq.ProtoReflect.Descriptor instead.
func (*DownloadObjectReq) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{8}
}

func (x *DownloadObjectReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DownloadObjectReq) GetObjUuid() string {
	if x != nil {
		return x.ObjUuid
	}
	return ""
}

func (x *DownloadObjectReq) GetNodeId() int32 {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return 0
}

type DownloadObjectTaskParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"request"
	Request *DownloadObjectReq `protobuf:"bytes,1,opt,name=request,proto3" json:"request"`
	// @inject_tag: json:"node_id"
	NodeId int32 `protobuf:"varint,2,opt,name=node_id,proto3" json:"node_id"`
}

func (x *DownloadObjectTaskParams) Reset() {
	*x = DownloadObjectTaskParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadObjectTaskParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadObjectTaskParams) ProtoMessage() {}

func (x *DownloadObjectTaskParams) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadObjectTaskParams.ProtoReflect.Descriptor instead.
func (*DownloadObjectTaskParams) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{9}
}

func (x *DownloadObjectTaskParams) GetRequest() *DownloadObjectReq {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *DownloadObjectTaskParams) GetNodeId() int32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

type DownloadObjectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"code"
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// @inject_tag: json:"message"
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	// @inject_tag: json:"task_id"
	TaskId int32 `protobuf:"varint,3,opt,name=task_id,proto3" json:"task_id"`
	// @inject_tag: json:"location"
	Location string `protobuf:"bytes,4,opt,name=location,proto3" json:"location"`
	// @inject_tag: json:"node_type"
	NodeType int32 `protobuf:"varint,5,opt,name=node_type,proto3" json:"node_type"`
}

func (x *DownloadObjectResp) Reset() {
	*x = DownloadObjectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadObjectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadObjectResp) ProtoMessage() {}

func (x *DownloadObjectResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadObjectResp.ProtoReflect.Descriptor instead.
func (*DownloadObjectResp) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{10}
}

func (x *DownloadObjectResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DownloadObjectResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DownloadObjectResp) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *DownloadObjectResp) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *DownloadObjectResp) GetNodeType() int32 {
	if x != nil {
		return x.NodeType
	}
	return 0
}

type CreateListObjectsSignedUrlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"prefix"
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix"`
}

func (x *CreateListObjectsSignedUrlReq) Reset() {
	*x = CreateListObjectsSignedUrlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateListObjectsSignedUrlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateListObjectsSignedUrlReq) ProtoMessage() {}

func (x *CreateListObjectsSignedUrlReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateListObjectsSignedUrlReq.ProtoReflect.Descriptor instead.
func (*CreateListObjectsSignedUrlReq) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{11}
}

func (x *CreateListObjectsSignedUrlReq) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

type MigrateObjectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"user_id"
	UserId string `protobuf:"bytes,1,opt,name=user_id,proto3" json:"user_id"`
	// @inject_tag: json:"obj_uuid"
	ObjUuid string `protobuf:"bytes,2,opt,name=obj_uuid,proto3" json:"obj_uuid"`
	// @inject_tag: json:"source_node_id"
	SourceNodeId *int32 `protobuf:"varint,3,opt,name=source_node_id,proto3,oneof" json:"source_node_id"`
	// @inject_tag: json:"target_node_id"
	TargetNodeId int32 `protobuf:"varint,4,opt,name=target_node_id,proto3" json:"target_node_id"`
}

func (x *MigrateObjectReq) Reset() {
	*x = MigrateObjectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrateObjectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrateObjectReq) ProtoMessage() {}

func (x *MigrateObjectReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrateObjectReq.ProtoReflect.Descriptor instead.
func (*MigrateObjectReq) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{12}
}

func (x *MigrateObjectReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MigrateObjectReq) GetObjUuid() string {
	if x != nil {
		return x.ObjUuid
	}
	return ""
}

func (x *MigrateObjectReq) GetSourceNodeId() int32 {
	if x != nil && x.SourceNodeId != nil {
		return *x.SourceNodeId
	}
	return 0
}

func (x *MigrateObjectReq) GetTargetNodeId() int32 {
	if x != nil {
		return x.TargetNodeId
	}
	return 0
}

type MigrateObjectTaskParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"request"
	Request *MigrateObjectReq `protobuf:"bytes,1,opt,name=request,proto3" json:"request"`
	// @inject_tag: json:"source_node_id"
	SourceNodeId int32 `protobuf:"varint,2,opt,name=source_node_id,proto3" json:"source_node_id"`
}

func (x *MigrateObjectTaskParams) Reset() {
	*x = MigrateObjectTaskParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrateObjectTaskParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrateObjectTaskParams) ProtoMessage() {}

func (x *MigrateObjectTaskParams) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrateObjectTaskParams.ProtoReflect.Descriptor instead.
func (*MigrateObjectTaskParams) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{13}
}

func (x *MigrateObjectTaskParams) GetRequest() *MigrateObjectReq {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *MigrateObjectTaskParams) GetSourceNodeId() int32 {
	if x != nil {
		return x.SourceNodeId
	}
	return 0
}

type MigrateObjectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"code"
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// @inject_tag: json:"message"
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	// @inject_tag: json:"task_id"
	TaskId int32 `protobuf:"varint,3,opt,name=task_id,proto3" json:"task_id"`
	// @inject_tag: json:"node_type"
	NodeType int32 `protobuf:"varint,4,opt,name=node_type,proto3" json:"node_type"`
}

func (x *MigrateObjectResp) Reset() {
	*x = MigrateObjectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrateObjectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrateObjectResp) ProtoMessage() {}

func (x *MigrateObjectResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrateObjectResp.ProtoReflect.Descriptor instead.
func (*MigrateObjectResp) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{14}
}

func (x *MigrateObjectResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *MigrateObjectResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MigrateObjectResp) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *MigrateObjectResp) GetNodeType() int32 {
	if x != nil {
		return x.NodeType
	}
	return 0
}

type GetObjectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"user_id"
	UserId string `protobuf:"bytes,1,opt,name=user_id,proto3" json:"user_id"`
	// @inject_tag: json:"page_index"
	PageIndex int32 `protobuf:"varint,2,opt,name=page_index,proto3" json:"page_index"`
	// @inject_tag: json:"page_size"
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,proto3" json:"page_size"`
	// @inject_tag: json:"sort_by"
	SortBy *string `protobuf:"bytes,4,opt,name=sort_by,proto3,oneof" json:"sort_by"`
	// @inject_tag: json:"order_by"
	OrderBy *string `protobuf:"bytes,5,opt,name=order_by,proto3,oneof" json:"order_by"`
	// @inject_tag: json:"obj_uuid"
	ObjUuid *string `protobuf:"bytes,6,opt,name=obj_uuid,proto3,oneof" json:"obj_uuid"`
}

func (x *GetObjectReq) Reset() {
	*x = GetObjectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetObjectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectReq) ProtoMessage() {}

func (x *GetObjectReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectReq.ProtoReflect.Descriptor instead.
func (*GetObjectReq) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{15}
}

func (x *GetObjectReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetObjectReq) GetPageIndex() int32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *GetObjectReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetObjectReq) GetSortBy() string {
	if x != nil && x.SortBy != nil {
		return *x.SortBy
	}
	return ""
}

func (x *GetObjectReq) GetOrderBy() string {
	if x != nil && x.OrderBy != nil {
		return *x.OrderBy
	}
	return ""
}

func (x *GetObjectReq) GetObjUuid() string {
	if x != nil && x.ObjUuid != nil {
		return *x.ObjUuid
	}
	return ""
}

type GetObjectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"code"
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// @inject_tag: json:"message"
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	// @inject_tag: json:"data"
	Data *GetObjectRespData `protobuf:"bytes,3,opt,name=data,proto3" json:"data"`
}

func (x *GetObjectResp) Reset() {
	*x = GetObjectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetObjectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectResp) ProtoMessage() {}

func (x *GetObjectResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectResp.ProtoReflect.Descriptor instead.
func (*GetObjectResp) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{16}
}

func (x *GetObjectResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetObjectResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetObjectResp) GetData() *GetObjectRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetObjectRespData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"total"
	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	// @inject_tag: json:"list"
	List []*module.DataObj `protobuf:"bytes,2,rep,name=list,proto3" json:"list"`
}

func (x *GetObjectRespData) Reset() {
	*x = GetObjectRespData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetObjectRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectRespData) ProtoMessage() {}

func (x *GetObjectRespData) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectRespData.ProtoReflect.Descriptor instead.
func (*GetObjectRespData) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{17}
}

func (x *GetObjectRespData) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetObjectRespData) GetList() []*module.DataObj {
	if x != nil {
		return x.List
	}
	return nil
}

type DeleteObjectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"user_id"
	UserId string `protobuf:"bytes,1,opt,name=user_id,proto3" json:"user_id"`
	// @inject_tag: json:"obj_uuid"
	ObjUuid string `protobuf:"bytes,2,opt,name=obj_uuid,proto3" json:"obj_uuid"`
}

func (x *DeleteObjectReq) Reset() {
	*x = DeleteObjectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteObjectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteObjectReq) ProtoMessage() {}

func (x *DeleteObjectReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteObjectReq.ProtoReflect.Descriptor instead.
func (*DeleteObjectReq) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteObjectReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DeleteObjectReq) GetObjUuid() string {
	if x != nil {
		return x.ObjUuid
	}
	return ""
}

type DeleteObjectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"code"
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// @inject_tag: json:"message"
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	// @inject_tag: json:"task_id"
	TaskId int32 `protobuf:"varint,3,opt,name=task_id,proto3" json:"task_id"`
}

func (x *DeleteObjectResp) Reset() {
	*x = DeleteObjectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteObjectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteObjectResp) ProtoMessage() {}

func (x *DeleteObjectResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteObjectResp.ProtoReflect.Descriptor instead.
func (*DeleteObjectResp) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteObjectResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteObjectResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteObjectResp) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type PutObjectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"user_id"
	UserId string `protobuf:"bytes,1,opt,name=user_id,proto3" json:"user_id"`
	// @inject_tag: json:"obj_uuid"
	ObjUuid string `protobuf:"bytes,2,opt,name=obj_uuid,proto3" json:"obj_uuid"`
	// @inject_tag: json:"name"
	Name *string `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name"`
	// @inject_tag: json:"desc"
	Desc *string `protobuf:"bytes,4,opt,name=desc,proto3,oneof" json:"desc"`
}

func (x *PutObjectReq) Reset() {
	*x = PutObjectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutObjectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutObjectReq) ProtoMessage() {}

func (x *PutObjectReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutObjectReq.ProtoReflect.Descriptor instead.
func (*PutObjectReq) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{20}
}

func (x *PutObjectReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PutObjectReq) GetObjUuid() string {
	if x != nil {
		return x.ObjUuid
	}
	return ""
}

func (x *PutObjectReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PutObjectReq) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

type PostNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"name"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	// @inject_tag: json:"desc"
	Desc *string `protobuf:"bytes,2,opt,name=desc,proto3,oneof" json:"desc"`
	// @inject_tag: json:"type"
	Type int32 `protobuf:"varint,3,opt,name=type,proto3" json:"type"`
	// @inject_tag: json:"property"
	Property int32 `protobuf:"varint,4,opt,name=property,proto3" json:"property"`
	// @inject_tag: json:"config"
	Config *string `protobuf:"bytes,5,opt,name=config,proto3,oneof" json:"config"`
}

func (x *PostNodeReq) Reset() {
	*x = PostNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostNodeReq) ProtoMessage() {}

func (x *PostNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostNodeReq.ProtoReflect.Descriptor instead.
func (*PostNodeReq) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{21}
}

func (x *PostNodeReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PostNodeReq) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *PostNodeReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PostNodeReq) GetProperty() int32 {
	if x != nil {
		return x.Property
	}
	return 0
}

func (x *PostNodeReq) GetConfig() string {
	if x != nil && x.Config != nil {
		return *x.Config
	}
	return ""
}

type GetNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"page_index"
	PageIndex int32 `protobuf:"varint,1,opt,name=page_index,proto3" json:"page_index"`
	// @inject_tag: json:"page_size"
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,proto3" json:"page_size"`
	// @inject_tag: json:"sort_by"
	SortBy *string `protobuf:"bytes,3,opt,name=sort_by,proto3,oneof" json:"sort_by"`
	// @inject_tag: json:"order_by"
	OrderBy *string `protobuf:"bytes,4,opt,name=order_by,proto3,oneof" json:"order_by"`
	// @inject_tag: json:"node_id"
	NodeId *int32 `protobuf:"varint,5,opt,name=node_id,proto3,oneof" json:"node_id"`
}

func (x *GetNodeReq) Reset() {
	*x = GetNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeReq) ProtoMessage() {}

func (x *GetNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeReq.ProtoReflect.Descriptor instead.
func (*GetNodeReq) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{22}
}

func (x *GetNodeReq) GetPageIndex() int32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *GetNodeReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetNodeReq) GetSortBy() string {
	if x != nil && x.SortBy != nil {
		return *x.SortBy
	}
	return ""
}

func (x *GetNodeReq) GetOrderBy() string {
	if x != nil && x.OrderBy != nil {
		return *x.OrderBy
	}
	return ""
}

func (x *GetNodeReq) GetNodeId() int32 {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return 0
}

type GetNodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"code"
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// @inject_tag: json:"message"
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	// @inject_tag: json:"data"
	Data *GetNodeRespData `protobuf:"bytes,3,opt,name=data,proto3" json:"data"`
}

func (x *GetNodeResp) Reset() {
	*x = GetNodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeResp) ProtoMessage() {}

func (x *GetNodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeResp.ProtoReflect.Descriptor instead.
func (*GetNodeResp) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{23}
}

func (x *GetNodeResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetNodeResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetNodeResp) GetData() *GetNodeRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetNodeRespData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"total"
	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	// @inject_tag: json:"list"
	List []*module.StorageNode `protobuf:"bytes,2,rep,name=list,proto3" json:"list"`
}

func (x *GetNodeRespData) Reset() {
	*x = GetNodeRespData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeRespData) ProtoMessage() {}

func (x *GetNodeRespData) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeRespData.ProtoReflect.Descriptor instead.
func (*GetNodeRespData) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{24}
}

func (x *GetNodeRespData) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetNodeRespData) GetList() []*module.StorageNode {
	if x != nil {
		return x.List
	}
	return nil
}

type PutNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"node_id"
	NodeId int32 `protobuf:"varint,1,opt,name=node_id,proto3" json:"node_id"`
	// @inject_tag: json:"name"
	Name *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name"`
	// @inject_tag: json:"desc"
	Desc *string `protobuf:"bytes,3,opt,name=desc,proto3,oneof" json:"desc"`
	// @inject_tag: json:"type"
	Type *int32 `protobuf:"varint,4,opt,name=type,proto3,oneof" json:"type"`
	// @inject_tag: json:"property"
	Property *int32 `protobuf:"varint,5,opt,name=property,proto3,oneof" json:"property"`
	// @inject_tag: json:"status"
	Status *int32 `protobuf:"varint,6,opt,name=status,proto3,oneof" json:"status"`
	// @inject_tag: json:"config"
	Config *string `protobuf:"bytes,7,opt,name=config,proto3,oneof" json:"config"`
}

func (x *PutNodeReq) Reset() {
	*x = PutNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutNodeReq) ProtoMessage() {}

func (x *PutNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutNodeReq.ProtoReflect.Descriptor instead.
func (*PutNodeReq) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{25}
}

func (x *PutNodeReq) GetNodeId() int32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *PutNodeReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PutNodeReq) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *PutNodeReq) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *PutNodeReq) GetProperty() int32 {
	if x != nil && x.Property != nil {
		return *x.Property
	}
	return 0
}

func (x *PutNodeReq) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *PutNodeReq) GetConfig() string {
	if x != nil && x.Config != nil {
		return *x.Config
	}
	return ""
}

type GetTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"page_index"
	PageIndex int32 `protobuf:"varint,1,opt,name=page_index,proto3" json:"page_index"`
	// @inject_tag: json:"page_size"
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,proto3" json:"page_size"`
	// @inject_tag: json:"sort_by"
	SortBy *string `protobuf:"bytes,3,opt,name=sort_by,proto3,oneof" json:"sort_by"`
	// @inject_tag: json:"order_by"
	OrderBy *string `protobuf:"bytes,4,opt,name=order_by,proto3,oneof" json:"order_by"`
	// @inject_tag: json:"task_id"
	TaskId *int32 `protobuf:"varint,5,opt,name=task_id,proto3,oneof" json:"task_id"`
}

func (x *GetTaskReq) Reset() {
	*x = GetTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskReq) ProtoMessage() {}

func (x *GetTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskReq.ProtoReflect.Descriptor instead.
func (*GetTaskReq) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{26}
}

func (x *GetTaskReq) GetPageIndex() int32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *GetTaskReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetTaskReq) GetSortBy() string {
	if x != nil && x.SortBy != nil {
		return *x.SortBy
	}
	return ""
}

func (x *GetTaskReq) GetOrderBy() string {
	if x != nil && x.OrderBy != nil {
		return *x.OrderBy
	}
	return ""
}

func (x *GetTaskReq) GetTaskId() int32 {
	if x != nil && x.TaskId != nil {
		return *x.TaskId
	}
	return 0
}

type GetTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"code"
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// @inject_tag: json:"message"
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	// @inject_tag: json:"data"
	Data *GetTaskRespData `protobuf:"bytes,3,opt,name=data,proto3" json:"data"`
}

func (x *GetTaskResp) Reset() {
	*x = GetTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskResp) ProtoMessage() {}

func (x *GetTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskResp.ProtoReflect.Descriptor instead.
func (*GetTaskResp) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{27}
}

func (x *GetTaskResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetTaskResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetTaskResp) GetData() *GetTaskRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetTaskRespData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"total"
	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	// @inject_tag: json:"list"
	List []*TaskDetail `protobuf:"bytes,2,rep,name=list,proto3" json:"list"`
}

func (x *GetTaskRespData) Reset() {
	*x = GetTaskRespData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRespData) ProtoMessage() {}

func (x *GetTaskRespData) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRespData.ProtoReflect.Descriptor instead.
func (*GetTaskRespData) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{28}
}

func (x *GetTaskRespData) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetTaskRespData) GetList() []*TaskDetail {
	if x != nil {
		return x.List
	}
	return nil
}

type TaskDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"task"
	Task *module.Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task"`
	// @inject_tag: json:"execs"
	Execs []*module.TaskExec `protobuf:"bytes,2,rep,name=execs,proto3" json:"execs"`
}

func (x *TaskDetail) Reset() {
	*x = TaskDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDetail) ProtoMessage() {}

func (x *TaskDetail) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDetail.ProtoReflect.Descriptor instead.
func (*TaskDetail) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{29}
}

func (x *TaskDetail) GetTask() *module.Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *TaskDetail) GetExecs() []*module.TaskExec {
	if x != nil {
		return x.Execs
	}
	return nil
}

type FinishTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"task_id"
	TaskId int32 `protobuf:"varint,1,opt,name=task_id,proto3" json:"task_id"`
	// @inject_tag: json:"result"
	Result int32 `protobuf:"varint,2,opt,name=result,proto3" json:"result"`
	// @inject_tag: json:"return"
	Return *string `protobuf:"bytes,3,opt,name=return,proto3,oneof" json:"return"`
}

func (x *FinishTaskReq) Reset() {
	*x = FinishTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishTaskReq) ProtoMessage() {}

func (x *FinishTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishTaskReq.ProtoReflect.Descriptor instead.
func (*FinishTaskReq) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{30}
}

func (x *FinishTaskReq) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *FinishTaskReq) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *FinishTaskReq) GetReturn() string {
	if x != nil && x.Return != nil {
		return *x.Return
	}
	return ""
}

type RetryTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"task_id"
	TaskId int32 `protobuf:"varint,1,opt,name=task_id,proto3" json:"task_id"`
}

func (x *RetryTaskReq) Reset() {
	*x = RetryTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryTaskReq) ProtoMessage() {}

func (x *RetryTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryTaskReq.ProtoReflect.Descriptor instead.
func (*RetryTaskReq) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{31}
}

func (x *RetryTaskReq) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type CancelTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"task_id"
	TaskId int32 `protobuf:"varint,1,opt,name=task_id,proto3" json:"task_id"`
}

func (x *CancelTaskReq) Reset() {
	*x = CancelTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTaskReq) ProtoMessage() {}

func (x *CancelTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTaskReq.ProtoReflect.Descriptor instead.
func (*CancelTaskReq) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{32}
}

func (x *CancelTaskReq) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type PostConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"key"
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key"`
	// @inject_tag: json:"value"
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
	// @inject_tag: json:"desc"
	Desc *string `protobuf:"bytes,3,opt,name=desc,proto3,oneof" json:"desc"`
}

func (x *PostConfigReq) Reset() {
	*x = PostConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostConfigReq) ProtoMessage() {}

func (x *PostConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostConfigReq.ProtoReflect.Descriptor instead.
func (*PostConfigReq) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{33}
}

func (x *PostConfigReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PostConfigReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *PostConfigReq) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

type GetConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"page_index"
	PageIndex int32 `protobuf:"varint,1,opt,name=page_index,proto3" json:"page_index"`
	// @inject_tag: json:"page_size"
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,proto3" json:"page_size"`
	// @inject_tag: json:"sort_by"
	SortBy *string `protobuf:"bytes,3,opt,name=sort_by,proto3,oneof" json:"sort_by"`
	// @inject_tag: json:"order_by"
	OrderBy *string `protobuf:"bytes,4,opt,name=order_by,proto3,oneof" json:"order_by"`
	// @inject_tag: json:"key"
	Key *string `protobuf:"bytes,5,opt,name=key,proto3,oneof" json:"key"`
	// @inject_tag: json:"status"
	Status *int32 `protobuf:"varint,6,opt,name=status,proto3,oneof" json:"status"`
}

func (x *GetConfigReq) Reset() {
	*x = GetConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigReq) ProtoMessage() {}

func (x *GetConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigReq.ProtoReflect.Descriptor instead.
func (*GetConfigReq) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{34}
}

func (x *GetConfigReq) GetPageIndex() int32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *GetConfigReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetConfigReq) GetSortBy() string {
	if x != nil && x.SortBy != nil {
		return *x.SortBy
	}
	return ""
}

func (x *GetConfigReq) GetOrderBy() string {
	if x != nil && x.OrderBy != nil {
		return *x.OrderBy
	}
	return ""
}

func (x *GetConfigReq) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *GetConfigReq) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

type GetConfigResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"code"
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// @inject_tag: json:"message"
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	// @inject_tag: json:"data"
	Data *GetConfigRespData `protobuf:"bytes,3,opt,name=data,proto3" json:"data"`
}

func (x *GetConfigResp) Reset() {
	*x = GetConfigResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigResp) ProtoMessage() {}

func (x *GetConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigResp.ProtoReflect.Descriptor instead.
func (*GetConfigResp) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{35}
}

func (x *GetConfigResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetConfigResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetConfigResp) GetData() *GetConfigRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetConfigRespData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"total"
	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	// @inject_tag: json:"list"
	List []*module.Config `protobuf:"bytes,2,rep,name=list,proto3" json:"list"`
}

func (x *GetConfigRespData) Reset() {
	*x = GetConfigRespData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigRespData) ProtoMessage() {}

func (x *GetConfigRespData) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigRespData.ProtoReflect.Descriptor instead.
func (*GetConfigRespData) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{36}
}

func (x *GetConfigRespData) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetConfigRespData) GetList() []*module.Config {
	if x != nil {
		return x.List
	}
	return nil
}

type PutConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"key"
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key"`
	// @inject_tag: json:"value"
	Value *string `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value"`
	// @inject_tag: json:"status"
	Status *int32 `protobuf:"varint,3,opt,name=status,proto3,oneof" json:"status"`
	// @inject_tag: json:"desc"
	Desc *string `protobuf:"bytes,4,opt,name=desc,proto3,oneof" json:"desc"`
}

func (x *PutConfigReq) Reset() {
	*x = PutConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_urchin_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutConfigReq) ProtoMessage() {}

func (x *PutConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_urchin_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutConfigReq.ProtoReflect.Descriptor instead.
func (*PutConfigReq) Descriptor() ([]byte, []int) {
	return file_api_v1_urchin_proto_rawDescGZIP(), []int{37}
}

func (x *PutConfigReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PutConfigReq) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *PutConfigReq) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *PutConfigReq) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

var File_api_v1_urchin_proto protoreflect.FileDescriptor

var file_api_v1_urchin_proto_rawDesc = []byte{
	0x0a, 0x13, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x26, 0x70, 0x63, 0x6c, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x67,
	0x6f, 0x2e, 0x75, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x6f, 0x62, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xab, 0x02, 0x0a, 0x08, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6b, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x57, 0x92, 0x41, 0x54, 0x32, 0x52, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe7, 0xa0, 0x81, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe9, 0x9d, 0x9e, 0x30, 0xe5, 0x8d, 0xb3, 0xe6, 0x9c, 0x8d, 0xe5,
	0x8a, 0xa1, 0xe5, 0xa4, 0x84, 0xe7, 0x90, 0x86, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xef, 0xbc,
	0x8c, 0xe5, 0x85, 0xb7, 0xe4, 0xbd, 0x93, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81,
	0xe5, 0x8f, 0x82, 0xe7, 0x9c, 0x8b, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x70, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x56, 0x92, 0x41, 0x53, 0x32, 0x51, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4,
	0xb8, 0xb2, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a,
	0xa1, 0xe5, 0xa4, 0x84, 0xe7, 0x90, 0x86, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe6, 0x97, 0xb6,
	0xef, 0xbc, 0x8c, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab, 0xe7, 0x9b, 0xb8, 0xe5, 0xba, 0x94, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x3a, 0x40, 0x92, 0x41, 0x3d, 0x0a, 0x3b, 0x2a, 0x15, 0xe9, 0xbb, 0x98,
	0xe8, 0xae, 0xa4, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x84, 0xe4,
	0xbd, 0x93, 0x32, 0x22, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x20, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x97, 0x07, 0x0a, 0x0f, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x75, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5b, 0x92, 0x41, 0x4f,
	0x32, 0x4d, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe5, 0x85,
	0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64, 0xef, 0xbc, 0x8c, 0xe5,
	0xbf, 0x85, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0xad,
	0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0xe9,
	0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x31, 0x7e, 0x36, 0x34, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x12, 0x67, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x53, 0x92, 0x41, 0x47, 0x32, 0x45, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8,
	0xb1, 0xa1, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0xbf, 0x85, 0xe5, 0xa1,
	0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6,
	0xe4, 0xb8, 0xb2, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba,
	0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x31, 0x7e, 0x36, 0x34, 0xfa, 0x42, 0x06, 0x72, 0x04,
	0x10, 0x01, 0x18, 0x40, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7e, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x6a, 0x92, 0x41, 0x60, 0x32, 0x5e, 0xe6,
	0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0xef, 0xbc, 0x8c, 0xe5, 0xbf, 0x85, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef,
	0xbc, 0x8c, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x28, 0x30,
	0x2c, 0x7e, 0x29, 0xef, 0xbc, 0x8c, 0x31, 0x3a, 0x20, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0x3b,
	0x20, 0x32, 0x3a, 0x20, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0xe5, 0xa4, 0xb9, 0xfa, 0x42, 0x04,
	0x1a, 0x02, 0x20, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x73, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x5f, 0x92, 0x41, 0x55, 0x32, 0x53, 0xe6,
	0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe5, 0xa4, 0xa7, 0xe5, 0xb0,
	0x8f, 0xef, 0xbc, 0x8c, 0xe5, 0xbf, 0x85, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0x95, 0xe4, 0xbd, 0x8d, 0xe5, 0xad, 0x97, 0xe8, 0x8a, 0x82, 0xef,
	0xbc, 0x8c, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc,
	0x8c, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x5b, 0x30, 0x2c,
	0x7e, 0x29, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x75, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5c, 0x92,
	0x41, 0x4f, 0x32, 0x4d, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1,
	0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0x20, 0xe9, 0x80,
	0x89, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0xad, 0x97,
	0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe9,
	0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x30, 0x7e, 0x31, 0x30, 0x32,
	0x34, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x00, 0x18, 0x80, 0x08, 0x48, 0x00, 0x52, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x9e, 0x01, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x7f, 0x92, 0x41, 0x75, 0x32, 0x73, 0xe4,
	0xb8, 0x8a, 0xe4, 0xbc, 0xa0, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xad, 0xe5, 0xbf, 0x83, 0x69, 0x64,
	0xef, 0xbc, 0x8c, 0xe9, 0x80, 0x89, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef,
	0xbc, 0x8c, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc,
	0x8c, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x5b, 0x31, 0x2c,
	0x7e, 0x29, 0xef, 0xbc, 0x8c, 0xe6, 0x9c, 0xaa, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe8, 0xaf,
	0xa5, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe5, 0x88, 0x99, 0xe7, 0x94, 0xb1, 0xe7, 0xb3, 0xbb,
	0xe7, 0xbb, 0x9f, 0xe9, 0x80, 0x89, 0xe5, 0xae, 0x9a, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xad, 0xe5,
	0xbf, 0x83, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x48, 0x01, 0x52, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x88, 0x01, 0x01, 0x3a, 0x81, 0x01, 0x92, 0x41, 0x7e, 0x0a, 0x7c, 0x2a,
	0x24, 0xe4, 0xb8, 0x8a, 0xe4, 0xbc, 0xa0, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xaf, 0xb9,
	0xe8, 0xb1, 0xa1, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5,
	0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x32, 0x35, 0xe4, 0xb8, 0x8a, 0xe4, 0xbc, 0xa0, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5,
	0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x20, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0xd2, 0x01, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x04,
	0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x22, 0xa1, 0x04, 0x0a, 0x10, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x39, 0x92, 0x41, 0x36, 0x32, 0x34, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe7, 0xa0, 0x81, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe9, 0x9d, 0x9e, 0x30, 0xe5, 0x8d, 0xb3, 0xe6, 0x9c, 0x8d, 0xe5,
	0x8a, 0xa1, 0xe5, 0xa4, 0x84, 0xe7, 0x90, 0x86, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x70, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x56, 0x92, 0x41, 0x53, 0x32, 0x51, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe5, 0xad, 0x97, 0xe7, 0xac,
	0xa6, 0xe4, 0xb8, 0xb2, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe6, 0x9c, 0x8d,
	0xe5, 0x8a, 0xa1, 0xe5, 0xa4, 0x84, 0xe7, 0x90, 0x86, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe6,
	0x97, 0xb6, 0xef, 0xbc, 0x8c, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab, 0xe7, 0x9b, 0xb8, 0xe5, 0xba,
	0x94, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x62, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x48, 0x92, 0x41, 0x45, 0x32, 0x43, 0xe4, 0xbb,
	0xbb, 0xe5, 0x8a, 0xa1, 0x69, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0xe8,
	0xaf, 0xa5, 0xe4, 0xb8, 0x8a, 0xe4, 0xbc, 0xa0, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xef, 0xbc,
	0x8c, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c,
	0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x5b, 0x31, 0x2c, 0x7e,
	0x29, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x12, 0x82, 0x01, 0x0a, 0x09, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x64,
	0x92, 0x41, 0x61, 0x32, 0x5f, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xad, 0xe5, 0xbf, 0x83, 0xe5, 0xad,
	0x98, 0xe5, 0x82, 0xa8, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0x31, 0xef, 0xbc,
	0x9a, 0x69, 0x70, 0x66, 0x73, 0xef, 0xbc, 0x9b, 0x32, 0xef, 0xbc, 0x9a, 0x6f, 0x62, 0x73, 0xef,
	0xbc, 0x9b, 0x33, 0xef, 0xbc, 0x9a, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0xef, 0xbc, 0x9b, 0x2e, 0x2e,
	0x2e, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x5b,
	0x31, 0x2c, 0x7e, 0x29, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a,
	0x63, 0x92, 0x41, 0x60, 0x0a, 0x5e, 0x2a, 0x24, 0xe4, 0xb8, 0x8a, 0xe4, 0xbc, 0xa0, 0xe6, 0x95,
	0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x32, 0x36, 0xe4, 0xb8,
	0x8a, 0xe4, 0xbc, 0xa0, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x3a, 0x20, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x22, 0xab, 0x02, 0x0a, 0x29, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x52,
	0x65, 0x71, 0x12, 0x49, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x2f, 0x92, 0x41, 0x25, 0x32, 0x23, 0xe4, 0xb8, 0x8a, 0xe4, 0xbc, 0xa0,
	0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x69, 0x64, 0x2c, 0x20, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc,
	0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe5, 0xa4, 0xa7, 0xe4, 0xba, 0x8e, 0x30, 0xfa, 0x42, 0x04,
	0x1a, 0x02, 0x20, 0x00, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x3a, 0xb2, 0x01,
	0x92, 0x41, 0xae, 0x01, 0x0a, 0xab, 0x01, 0x2a, 0x39, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5,
	0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0xe4, 0xb8, 0x8a, 0xe4, 0xbc, 0xa0, 0xe6, 0xae,
	0xb5, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0xad, 0xbe, 0xe5, 0x90, 0x8d, 0x75, 0x72, 0x6c,
	0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0x32, 0x64, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b,
	0xe5, 0x8c, 0x96, 0xe4, 0xb8, 0x8a, 0xe4, 0xbc, 0xa0, 0xe6, 0xae, 0xb5, 0xe4, 0xbb, 0xbb, 0xe5,
	0x8a, 0xa1, 0xe7, 0xad, 0xbe, 0xe5, 0x90, 0x8d, 0x75, 0x72, 0x6c, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1,
	0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x20, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0xd2, 0x01, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x22, 0xc7, 0x03, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x72, 0x6c,
	0x52, 0x65, 0x71, 0x12, 0x5b, 0x0a, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0x92, 0x41, 0x31, 0x32, 0x2f, 0xe5, 0x88, 0x86,
	0xe6, 0xae, 0xb5, 0xe4, 0xb8, 0x8a, 0xe4, 0xbc, 0xa0, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x69,
	0x64, 0x2c, 0x20, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe9, 0x95, 0xbf, 0xe5,
	0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x31, 0x7e, 0x36, 0x34, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64,
	0x12, 0x55, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x33, 0x92, 0x41, 0x29, 0x32, 0x27, 0xe4, 0xb8, 0x8a, 0xe4,
	0xbc, 0xa0, 0xe5, 0x88, 0x86, 0xe6, 0xae, 0xb5, 0xe7, 0xbc, 0x96, 0xe5, 0x8f, 0xb7, 0x2c, 0x20,
	0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe5, 0xa4, 0xa7, 0xe4,
	0xba, 0x8e, 0x30, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2f, 0x92, 0x41, 0x25, 0x32, 0x23, 0xe4,
	0xb8, 0x8a, 0xe4, 0xbc, 0xa0, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x69, 0x64, 0x2c, 0x20, 0xe6,
	0x95, 0xb0, 0xe5, 0x80, 0xbc, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe5, 0xa4, 0xa7, 0xe4, 0xba,
	0x8e, 0x30, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x3a, 0xa7, 0x01, 0x92, 0x41, 0xa3, 0x01, 0x0a, 0xa0, 0x01, 0x2a, 0x2d, 0xe5, 0x88,
	0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0x88, 0x86, 0xe6, 0xae, 0xb5, 0xe4, 0xb8, 0x8a, 0xe4, 0xbc, 0xa0,
	0xe7, 0xad, 0xbe, 0xe5, 0x90, 0x8d, 0x75, 0x72, 0x6c, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x32, 0x4b, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0xe5, 0x88, 0x86, 0xe6, 0xae, 0xb5, 0xe4, 0xb8, 0x8a, 0xe4, 0xbc, 0xa0, 0xe7,
	0xad, 0xbe, 0xe5, 0x90, 0x8d, 0x75, 0x72, 0x6c, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f,
	0x82, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x20, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0xd2, 0x01, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0xd2, 0x01, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x22, 0x88, 0x03, 0x0a,
	0x29, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x5b, 0x0a, 0x09, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0x92,
	0x41, 0x31, 0x32, 0x2f, 0xe5, 0x88, 0x86, 0xe6, 0xae, 0xb5, 0xe4, 0xb8, 0x8a, 0xe4, 0xbc, 0xa0,
	0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x69, 0x64, 0x2c, 0x20, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6,
	0xe4, 0xb8, 0xb2, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x31,
	0x7e, 0x36, 0x34, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x09, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2f, 0x92, 0x41, 0x25, 0x32, 0x23, 0xe4,
	0xb8, 0x8a, 0xe4, 0xbc, 0xa0, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x69, 0x64, 0x2c, 0x20, 0xe6,
	0x95, 0xb0, 0xe5, 0x80, 0xbc, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe5, 0xa4, 0xa7, 0xe4, 0xba,
	0x8e, 0x30, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x3a, 0xb2, 0x01, 0x92, 0x41, 0xae, 0x01, 0x0a, 0xab, 0x01, 0x2a, 0x33, 0xe5, 0x88,
	0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0x90, 0x88, 0xe5, 0xb9, 0xb6, 0xe5, 0x88, 0x86, 0xe6, 0xae, 0xb5,
	0xe4, 0xb8, 0x8a, 0xe4, 0xbc, 0xa0, 0xe7, 0xad, 0xbe, 0xe5, 0x90, 0x8d, 0x75, 0x72, 0x6c, 0xe6,
	0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0x32, 0x5e, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0x90, 0x88, 0xe5, 0xb9, 0xb6, 0xe5,
	0x88, 0x86, 0xe6, 0xae, 0xb5, 0xe4, 0xb8, 0x8a, 0xe4, 0xbc, 0xa0, 0xe7, 0xad, 0xbe, 0xe5, 0x90,
	0x8d, 0x75, 0x72, 0x6c, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65,
	0x71, 0xd2, 0x01, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x22, 0xdf, 0x04, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x4d, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x39, 0x92,
	0x41, 0x36, 0x32, 0x34, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xa0, 0x81, 0xef, 0xbc, 0x8c,
	0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe9,
	0x9d, 0x9e, 0x30, 0xe5, 0x8d, 0xb3, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0xa4, 0x84, 0xe7,
	0x90, 0x86, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x70,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x56, 0x92, 0x41, 0x53, 0x32, 0x51, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0xa4, 0x84,
	0xe7, 0x90, 0x86, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe6, 0x97, 0xb6, 0xef, 0xbc, 0x8c, 0xe5,
	0x8c, 0x85, 0xe5, 0x90, 0xab, 0xe7, 0x9b, 0xb8, 0xe5, 0xba, 0x94, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x40, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe7, 0xad, 0xbe, 0xe5, 0x90,
	0x8d, 0x75, 0x72, 0x6c, 0xef, 0xbc, 0x8c, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x75,
	0x72, 0x6c, 0x12, 0x72, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x47, 0x2e, 0x70, 0x63, 0x6c, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x67, 0x6f, 0x2e,
	0x75, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x32, 0x0c, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x1a, 0x6f, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x63, 0x6c, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x67, 0x6f, 0x2e, 0x75, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x60, 0x92, 0x41, 0x5d, 0x0a, 0x5b, 0x2a, 0x21,
	0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe7, 0xad, 0xbe, 0xe5, 0x90, 0x8d, 0x75, 0x72, 0x6c, 0xe6,
	0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0x32, 0x36, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe7, 0xad, 0xbe, 0xe5, 0x90, 0x8d, 0x75,
	0x72, 0x6c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x8b, 0x01, 0x0a, 0x0c, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32,
	0x15, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe6, 0x95, 0xb0, 0xe7, 0xbb, 0x84,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x3a, 0x47,
	0x92, 0x41, 0x44, 0x0a, 0x42, 0x2a, 0x15, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0xe9, 0xa1, 0xb9, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x32, 0x29, 0xe8, 0xaf,
	0xb7, 0xe6, 0xb1, 0x82, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0xe9, 0xa1, 0xb9, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x20, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xa9, 0x04, 0x0a, 0x11, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x75, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5b,
	0x92, 0x41, 0x4f, 0x32, 0x4d, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1,
	0xa1, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64, 0xef,
	0xbc, 0x8c, 0xe5, 0xbf, 0x85, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc,
	0x8c, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x31, 0x7e,
	0x36, 0x34, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x12, 0x75, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x59, 0x92, 0x41, 0x4d, 0x32, 0x4b, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0xe6,
	0xa0, 0x87, 0xe8, 0xaf, 0x86, 0xef, 0xbc, 0x8c, 0xe5, 0xbf, 0x85, 0xe5, 0xa1, 0xab, 0xe5, 0x8f,
	0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99,
	0x90, 0xe5, 0x88, 0xb6, 0x31, 0x7e, 0x36, 0x34, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18,
	0x40, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x12, 0x9e, 0x01, 0x0a, 0x07,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x7f, 0x92,
	0x41, 0x75, 0x32, 0x73, 0xe4, 0xb8, 0x8b, 0xe8, 0xbd, 0xbd, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xad,
	0xe5, 0xbf, 0x83, 0x69, 0x64, 0xef, 0xbc, 0x8c, 0xe9, 0x80, 0x89, 0xe5, 0xa1, 0xab, 0xe5, 0x8f,
	0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0xe9, 0x99, 0x90, 0xe5,
	0x88, 0xb6, 0x5b, 0x31, 0x2c, 0x7e, 0x29, 0xef, 0xbc, 0x8c, 0xe6, 0x9c, 0xaa, 0xe6, 0x8f, 0x90,
	0xe4, 0xbe, 0x9b, 0xe8, 0xaf, 0xa5, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe5, 0x88, 0x99, 0xe7,
	0x94, 0xb1, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe9, 0x80, 0x89, 0xe5, 0xae, 0x9a, 0xe5, 0x88,
	0x86, 0xe4, 0xb8, 0xad, 0xe5, 0xbf, 0x83, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x48, 0x00,
	0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x88, 0x01, 0x01, 0x3a, 0x79, 0x92, 0x41,
	0x76, 0x0a, 0x74, 0x2a, 0x24, 0xe4, 0xb8, 0x8b, 0xe8, 0xbd, 0xbd, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
	0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe8, 0xaf, 0xb7,
	0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x32, 0x37, 0xe4, 0xb8, 0x8b, 0xe8, 0xbd,
	0xbd, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe8, 0xaf, 0xb7,
	0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a,
	0x20, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0xd2, 0x01, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x08, 0x6f,
	0x62, 0x6a, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x22, 0xf5, 0x02, 0x0a, 0x18, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x6c, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x70, 0x63, 0x6c, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x67, 0x6f, 0x2e, 0x75,
	0x72, 0x63, 0x68, 0x69, 0x6e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x42, 0x17, 0x92, 0x41,
	0x14, 0x32, 0x12, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5,
	0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x83,
	0x01, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x69, 0x92, 0x41, 0x66, 0x32, 0x64, 0xe4, 0xb8, 0x8b, 0xe8, 0xbd, 0xbd, 0xe5, 0x88, 0x86,
	0xe4, 0xb8, 0xad, 0xe5, 0xbf, 0x83, 0x69, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb4, 0xe6, 0x95,
	0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc,
	0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x5b, 0x31, 0x2c, 0x7e, 0x29, 0xef, 0xbc, 0x8c, 0xe6, 0x9c,
	0xaa, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe8, 0xaf, 0xa5, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0xe5, 0x88, 0x99, 0xe7, 0x94, 0xb1, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe9, 0x80, 0x89, 0xe5,
	0xae, 0x9a, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xad, 0xe5, 0xbf, 0x83, 0x52, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x3a, 0x65, 0x92, 0x41, 0x62, 0x0a, 0x60, 0x2a, 0x1e, 0xe4, 0xb8, 0x8b,
	0xe8, 0xbd, 0xbd, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe4,
	0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x32, 0x3e, 0xe4, 0xb8, 0x8b,
	0xe8, 0xbd, 0xbd, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe4,
	0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0x3a, 0x20, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xec, 0x04, 0x0a, 0x12,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x4d, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x39, 0x92, 0x41, 0x36, 0x32, 0x34, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xa0, 0x81,
	0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef,
	0xbc, 0x8c, 0xe9, 0x9d, 0x9e, 0x30, 0xe5, 0x8d, 0xb3, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5,
	0xa4, 0x84, 0xe7, 0x90, 0x86, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x70, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x56, 0x92, 0x41, 0x53, 0x32, 0x51, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8,
	0xb2, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1,
	0xe5, 0xa4, 0x84, 0xe7, 0x90, 0x86, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe6, 0x97, 0xb6, 0xef,
	0xbc, 0x8c, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab, 0xe7, 0x9b, 0xb8, 0xe5, 0xba, 0x94, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x62, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x48, 0x92, 0x41, 0x45, 0x32, 0x43, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a,
	0xa1, 0x69, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0xe8, 0xaf, 0xa5, 0xe4,
	0xb8, 0x8b, 0xe8, 0xbd, 0xbd, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xef, 0xbc, 0x8c, 0xe6, 0x95,
	0xb4, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb0,
	0xe5, 0x80, 0xbc, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x5b, 0x31, 0x2c, 0x7e, 0x29, 0x52, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x32, 0x24,
	0xe4, 0xb8, 0xb4, 0xe6, 0x97, 0xb6, 0xe4, 0xb8, 0x8b, 0xe8, 0xbd, 0xbd, 0xe5, 0x9c, 0xb0, 0xe5,
	0x9d, 0x80, 0xef, 0xbc, 0x8c, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x82,
	0x01, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x64, 0x92, 0x41, 0x61, 0x32, 0x5f, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xad, 0xe5,
	0xbf, 0x83, 0xe5, 0xad, 0x98, 0xe5, 0x82, 0xa8, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc,
	0x8c, 0x31, 0xef, 0xbc, 0x9a, 0x69, 0x70, 0x66, 0x73, 0xef, 0xbc, 0x9b, 0x32, 0xef, 0xbc, 0x9a,
	0x6f, 0x62, 0x73, 0xef, 0xbc, 0x9b, 0x33, 0xef, 0xbc, 0x9a, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0xef,
	0xbc, 0x9b, 0x2e, 0x2e, 0x2e, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0xe9, 0x99, 0x90,
	0xe5, 0x88, 0xb6, 0x5b, 0x31, 0x2c, 0x7e, 0x29, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x3a, 0x65, 0x92, 0x41, 0x62, 0x0a, 0x60, 0x2a, 0x24, 0xe4, 0xb8, 0x8b, 0xe8,
	0xbd, 0xbd, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe6, 0x8e,
	0xa5, 0xe5, 0x8f, 0xa3, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0x32, 0x38, 0xe4, 0xb8, 0x8b, 0xe8, 0xbd, 0xbd, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xaf,
	0xb9, 0xe8, 0xb1, 0xa1, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x20, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0xfa, 0x01, 0x0a, 0x1d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x49, 0x0a, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41,
	0x27, 0x32, 0x25, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe5, 0x89, 0x8d, 0xe7, 0xbc, 0x80, 0x2c,
	0x20, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6,
	0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x31, 0x7e, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x3a, 0x8d, 0x01, 0x92, 0x41, 0x89, 0x01, 0x0a, 0x86,
	0x01, 0x2a, 0x2d, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0x88, 0x97, 0xe4, 0xb8, 0xbe, 0xe5,
	0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe7, 0xad, 0xbe, 0xe5, 0x90, 0x8d, 0x75, 0x72, 0x6c, 0xe6, 0x8e,
	0xa5, 0xe5, 0x8f, 0xa3, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0x32, 0x4c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0x88, 0x97, 0xe4, 0xb8, 0xbe, 0xe5, 0xaf,
	0xb9, 0xe8, 0xb1, 0xa1, 0xe7, 0xad, 0xbe, 0xe5, 0x90, 0x8d, 0x75, 0x72, 0x6c, 0xe8, 0xaf, 0xb7,
	0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a,
	0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0xd2, 0x01,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0xd3, 0x05, 0x0a, 0x10, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x75, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5b, 0x92,
	0x41, 0x4f, 0x32, 0x4d, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1,
	0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64, 0xef, 0xbc,
	0x8c, 0xe5, 0xbf, 0x85, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c,
	0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c,
	0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x31, 0x7e, 0x36,
	0x34, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x12, 0x75, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x59, 0x92, 0x41, 0x4d, 0x32, 0x4b, 0xe6, 0x95, 0xb0, 0xe6,
	0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0xe6, 0xa0,
	0x87, 0xe8, 0xaf, 0x86, 0xef, 0xbc, 0x8c, 0xe5, 0xbf, 0x85, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82,
	0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99, 0x90,
	0xe5, 0x88, 0xb6, 0x31, 0x7e, 0x36, 0x34, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40,
	0x52, 0x08, 0x6f, 0x62, 0x6a, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x12, 0xb0, 0x01, 0x0a, 0x0e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x82, 0x01, 0x92, 0x41, 0x78, 0x32, 0x76, 0xe8, 0xbf, 0x81, 0xe7, 0xa7,
	0xbb, 0xe6, 0xba, 0x90, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xad, 0xe5, 0xbf, 0x83, 0x69, 0x64, 0xef,
	0xbc, 0x8c, 0xe9, 0x80, 0x89, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc,
	0x8c, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c,
	0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x5b, 0x31, 0x2c, 0x7e,
	0x29, 0xef, 0xbc, 0x8c, 0xe6, 0x9c, 0xaa, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe8, 0xaf, 0xa5,
	0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe5, 0x88, 0x99, 0xe7, 0x94, 0xb1, 0xe7, 0xb3, 0xbb, 0xe7,
	0xbb, 0x9f, 0xe9, 0x80, 0x89, 0xe5, 0xae, 0x9a, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xad, 0xe5, 0xbf,
	0x83, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x7d, 0x0a,
	0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x55, 0x92, 0x41, 0x4b, 0x32, 0x49, 0xe8, 0xbf, 0x81, 0xe7,
	0xa7, 0xbb, 0xe7, 0x9b, 0xae, 0xe7, 0x9a, 0x84, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xad, 0xe5, 0xbf,
	0x83, 0x69, 0x64, 0xef, 0xbc, 0x8c, 0xe5, 0xbf, 0x85, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6,
	0x5b, 0x31, 0x2c, 0x7e, 0x29, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x0e, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x3a, 0x8b, 0x01, 0x92,
	0x41, 0x87, 0x01, 0x0a, 0x84, 0x01, 0x2a, 0x24, 0xe8, 0xbf, 0x81, 0xe7, 0xa7, 0xbb, 0xe6, 0x95,
	0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3,
	0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x32, 0x36, 0xe8, 0xbf,
	0x81, 0xe7, 0xa7, 0xbb, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1,
	0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x3a, 0x20, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0xd2, 0x01, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0xd2, 0x01,
	0x08, 0x6f, 0x62, 0x6a, 0x5f, 0x75, 0x75, 0x69, 0x64, 0xd2, 0x01, 0x0e, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x83, 0x03,
	0x0a, 0x17, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x6b, 0x0a, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x63, 0x6c,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x67, 0x6f, 0x2e, 0x75, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f,
	0xa3, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x94, 0x01, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x6c, 0x92, 0x41, 0x69, 0x32, 0x67, 0xe8, 0xbf, 0x81, 0xe7, 0xa7, 0xbb, 0xe6, 0xba, 0x90, 0xe5,
	0x88, 0x86, 0xe4, 0xb8, 0xad, 0xe5, 0xbf, 0x83, 0x69, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb4,
	0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb0, 0xe5,
	0x80, 0xbc, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x5b, 0x31, 0x2c, 0x7e, 0x29, 0xef, 0xbc, 0x8c,
	0xe6, 0x9c, 0xaa, 0xe6, 0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe8, 0xaf, 0xa5, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0xe5, 0x88, 0x99, 0xe7, 0x94, 0xb1, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe9, 0x80,
	0x89, 0xe5, 0xae, 0x9a, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xad, 0xe5, 0xbf, 0x83, 0x52, 0x0e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x3a, 0x64, 0x92,
	0x41, 0x61, 0x0a, 0x5f, 0x2a, 0x1e, 0xe8, 0xbf, 0x81, 0xe7, 0xa7, 0xbb, 0xe6, 0x95, 0xb0, 0xe6,
	0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0x8f,
	0x82, 0xe6, 0x95, 0xb0, 0x32, 0x3d, 0xe8, 0xbf, 0x81, 0xe7, 0xa7, 0xbb, 0xe6, 0x95, 0xb0, 0xe6,
	0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0x8f,
	0x82, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x20, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x22, 0xa3, 0x04, 0x0a, 0x11, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x39, 0x92, 0x41, 0x36, 0x32, 0x34, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xa0, 0x81, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe9, 0x9d, 0x9e, 0x30, 0xe5, 0x8d, 0xb3,
	0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0xa4, 0x84, 0xe7, 0x90, 0x86, 0xe5, 0xa4, 0xb1, 0xe8,
	0xb4, 0xa5, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x70, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x56, 0x92, 0x41, 0x53, 0x32, 0x51,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe5,
	0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc,
	0x8c, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0xa4, 0x84, 0xe7, 0x90, 0x86, 0xe5, 0xa4, 0xb1,
	0xe8, 0xb4, 0xa5, 0xe6, 0x97, 0xb6, 0xef, 0xbc, 0x8c, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab, 0xe7,
	0x9b, 0xb8, 0xe5, 0xba, 0x94, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x62, 0x0a, 0x07, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x48, 0x92, 0x41, 0x45,
	0x32, 0x43, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x69, 0x64, 0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0x87,
	0xe8, 0xaf, 0x86, 0xe8, 0xaf, 0xa5, 0xe8, 0xbf, 0x81, 0xe7, 0xa7, 0xbb, 0xe4, 0xbb, 0xbb, 0xe5,
	0x8a, 0xa1, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6,
	0x5b, 0x31, 0x2c, 0x7e, 0x29, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x12, 0x82,
	0x01, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x64, 0x92, 0x41, 0x61, 0x32, 0x5f, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xad, 0xe5,
	0xbf, 0x83, 0xe5, 0xad, 0x98, 0xe5, 0x82, 0xa8, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc,
	0x8c, 0x31, 0xef, 0xbc, 0x9a, 0x69, 0x70, 0x66, 0x73, 0xef, 0xbc, 0x9b, 0x32, 0xef, 0xbc, 0x9a,
	0x6f, 0x62, 0x73, 0xef, 0xbc, 0x9b, 0x33, 0xef, 0xbc, 0x9a, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0xef,
	0xbc, 0x9b, 0x2e, 0x2e, 0x2e, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0xe9, 0x99, 0x90,
	0xe5, 0x88, 0xb6, 0x5b, 0x31, 0x2c, 0x7e, 0x29, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x3a, 0x64, 0x92, 0x41, 0x61, 0x0a, 0x5f, 0x2a, 0x24, 0xe8, 0xbf, 0x81, 0xe7,
	0xa7, 0xbb, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe6, 0x8e,
	0xa5, 0xe5, 0x8f, 0xa3, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0x32, 0x37, 0xe8, 0xbf, 0x81, 0xe7, 0xa7, 0xbb, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xaf,
	0xb9, 0xe8, 0xb1, 0xa1, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x20, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0xaf, 0x06, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x75, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5b, 0x92, 0x41, 0x4f,
	0x32, 0x4d, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe5, 0x85,
	0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64, 0xef, 0xbc, 0x8c, 0xe5,
	0xbf, 0x85, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0xad,
	0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0xe9,
	0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x31, 0x7e, 0x36, 0x34, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x12, 0x56, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x36, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0xe9, 0xa1, 0xb5, 0xe7,
	0xa0, 0x81, 0xef, 0xbc, 0x8c, 0xe5, 0xbf, 0x85, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0x2c, 0x20, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe5,
	0xa4, 0xa7, 0xe4, 0xba, 0x8e, 0x30, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x5f, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x41, 0x92, 0x41,
	0x35, 0x32, 0x33, 0xe5, 0x8d, 0x95, 0xe9, 0xa1, 0xb5, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe6,
	0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0xbf, 0x85, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0x2c, 0x20, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x5b,
	0x31, 0x2c, 0x31, 0x30, 0x30, 0x29, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x10, 0x64, 0x20, 0x00, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x5f, 0x0a, 0x07, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0x92, 0x41, 0x36,
	0x32, 0x34, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xef, 0xbc,
	0x8c, 0xe9, 0x80, 0x89, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x2c, 0x20, 0xe5,
	0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99,
	0x90, 0xe5, 0x88, 0xb6, 0x31, 0x7e, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52,
	0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x88, 0x01, 0x01, 0x12, 0x67, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x46, 0x92,
	0x41, 0x33, 0x32, 0x31, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0xef, 0xbc, 0x8c, 0xe9, 0x80, 0x89, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x2c,
	0x20, 0xe5, 0x8f, 0x96, 0xe5, 0x80, 0xbc, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0x61, 0x73, 0x63,
	0x2c, 0x64, 0x65, 0x73, 0x63, 0xfa, 0x42, 0x0d, 0x72, 0x0b, 0x52, 0x03, 0x61, 0x73, 0x63, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x48, 0x01, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x7a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x59, 0x92, 0x41, 0x4d, 0x32, 0x4b, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0xe6,
	0xa0, 0x87, 0xe8, 0xaf, 0x86, 0xef, 0xbc, 0x8c, 0xe9, 0x80, 0x89, 0xe5, 0xa1, 0xab, 0xe5, 0x8f,
	0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99,
	0x90, 0xe5, 0x88, 0xb6, 0x31, 0x7e, 0x36, 0x34, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18,
	0x40, 0x48, 0x02, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x3a, 0x82, 0x01, 0x92, 0x41, 0x7f, 0x0a, 0x7d, 0x2a, 0x24, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96,
	0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe6, 0x8e, 0xa5, 0xe5,
	0x8f, 0xa3, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x32, 0x32,
	0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8,
	0xb1, 0xa1, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x20, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0xd2, 0x01, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0xd2, 0x01, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62,
	0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6f, 0x62, 0x6a, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x22, 0x9a, 0x03, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x39, 0x92, 0x41, 0x36,
	0x32, 0x34, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xa0, 0x81, 0xef, 0xbc, 0x8c, 0xe6, 0x95,
	0xb4, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe9, 0x9d, 0x9e,
	0x30, 0xe5, 0x8d, 0xb3, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0xa4, 0x84, 0xe7, 0x90, 0x86,
	0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x70, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x56, 0x92,
	0x41, 0x53, 0x32, 0x51, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0xef, 0xbc, 0x8c, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0xa4, 0x84, 0xe7, 0x90,
	0x86, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe6, 0x97, 0xb6, 0xef, 0xbc, 0x8c, 0xe5, 0x8c, 0x85,
	0xe5, 0x90, 0xab, 0xe7, 0x9b, 0xb8, 0xe5, 0xba, 0x94, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x66,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70,
	0x63, 0x6c, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x67, 0x6f, 0x2e, 0x75, 0x72, 0x63, 0x68, 0x69, 0x6e,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x8e,
	0xa5, 0xe5, 0x8f, 0xa3, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x60, 0x92, 0x41, 0x5d, 0x0a, 0x5b, 0x2a, 0x24, 0xe8,
	0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1,
	0xa1, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x8f, 0x82,
	0xe6, 0x95, 0xb0, 0x32, 0x33, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
	0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x8f, 0x82,
	0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x20, 0x47, 0x65, 0x74, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0xd4, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0x92,
	0x41, 0x0b, 0x32, 0x09, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe6, 0x95, 0xb0, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x42, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x4f, 0x62, 0x6a, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae,
	0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x97, 0xe8,
	0xa1, 0xa8, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x55, 0x92, 0x41, 0x52, 0x0a, 0x50, 0x2a,
	0x12, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x32, 0x2b, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1,
	0xa1, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x20, 0x47,
	0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61,
	0xd2, 0x01, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0xd2, 0x01, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0xf8, 0x02, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x75, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x5b, 0x92, 0x41, 0x4f, 0x32, 0x4d, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
	0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0x69, 0x64, 0xef, 0xbc, 0x8c, 0xe5, 0xbf, 0x85, 0xe5, 0xa1, 0xab, 0xe5, 0x8f,
	0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99,
	0x90, 0xe5, 0x88, 0xb6, 0x31, 0x7e, 0x36, 0x34, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18,
	0x40, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x75, 0x0a, 0x08, 0x6f, 0x62,
	0x6a, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x59, 0x92, 0x41,
	0x4d, 0x32, 0x4b, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe5,
	0x94, 0xaf, 0xe4, 0xb8, 0x80, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0xef, 0xbc, 0x8c, 0xe5, 0xbf,
	0x85, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0xad, 0x97,
	0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0xe9, 0x95,
	0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x31, 0x7e, 0x36, 0x34, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x3a, 0x77, 0x92, 0x41, 0x74, 0x0a, 0x72, 0x2a, 0x24, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4,
	0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe6, 0x8e, 0xa5, 0xe5,
	0x8f, 0xa3, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x32, 0x35,
	0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8,
	0xb1, 0xa1, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0xd2, 0x01, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0xd2,
	0x01, 0x08, 0x6f, 0x62, 0x6a, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x22, 0x9c, 0x03, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x4d, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x39, 0x92,
	0x41, 0x36, 0x32, 0x34, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xa0, 0x81, 0xef, 0xbc, 0x8c,
	0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe9,
	0x9d, 0x9e, 0x30, 0xe5, 0x8d, 0xb3, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0xa4, 0x84, 0xe7,
	0x90, 0x86, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x70,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x56, 0x92, 0x41, 0x53, 0x32, 0x51, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0xa4, 0x84,
	0xe7, 0x90, 0x86, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe6, 0x97, 0xb6, 0xef, 0xbc, 0x8c, 0xe5,
	0x8c, 0x85, 0xe5, 0x90, 0xab, 0xe7, 0x9b, 0xb8, 0xe5, 0xba, 0x94, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x62, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x48, 0x92, 0x41, 0x45, 0x32, 0x43, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x69, 0x64,
	0xef, 0xbc, 0x8c, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0xe8, 0xaf, 0xa5, 0xe5, 0x88, 0xa0, 0xe9,
	0x99, 0xa4, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb4, 0xe6, 0x95,
	0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc,
	0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x5b, 0x31, 0x2c, 0x7e, 0x29, 0x52, 0x07, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x3a, 0x63, 0x92, 0x41, 0x60, 0x0a, 0x5e, 0x2a, 0x24, 0xe5, 0x88, 0xa0,
	0xe9, 0x99, 0xa4, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe6,
	0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0x32, 0x36, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5,
	0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0xe9, 0x04, 0x0a, 0x0c, 0x50, 0x75,
	0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x75, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5b, 0x92, 0x41, 0x4f,
	0x32, 0x4d, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe5, 0x85,
	0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64, 0xef, 0xbc, 0x8c, 0xe5,
	0xbf, 0x85, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0xad,
	0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0xe9,
	0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x31, 0x7e, 0x36, 0x34, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x12, 0x75, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x59, 0x92, 0x41, 0x4d, 0x32, 0x4b, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae,
	0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0xe6, 0xa0, 0x87, 0xe8,
	0xaf, 0x86, 0xef, 0xbc, 0x8c, 0xe5, 0xbf, 0x85, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88,
	0xb6, 0x31, 0x7e, 0x36, 0x34, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x08,
	0x6f, 0x62, 0x6a, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x12, 0x6c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x53, 0x92, 0x41, 0x47, 0x32, 0x45, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xef,
	0xbc, 0x8c, 0xe9, 0x80, 0x89, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc,
	0x8c, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x31, 0x7e,
	0x36, 0x34, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x48, 0x00, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x75, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x5c, 0x92, 0x41, 0x4f, 0x32, 0x4d, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
	0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x2c, 0x20, 0xe9, 0x80, 0x89, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5,
	0x88, 0xb6, 0x30, 0x7e, 0x31, 0x30, 0x32, 0x34, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x00, 0x18,
	0x80, 0x08, 0x48, 0x01, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x3a, 0x74, 0x92,
	0x41, 0x71, 0x0a, 0x6f, 0x2a, 0x24, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x95, 0xb0, 0xe6,
	0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe8, 0xaf,
	0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x32, 0x32, 0xe6, 0x9b, 0xb4, 0xe6,
	0x96, 0xb0, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe8, 0xaf,
	0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0x3a, 0x20, 0x50, 0x75, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0xd2, 0x01,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x08, 0x6f, 0x62, 0x6a, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x22, 0xd6, 0x07, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x64, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x50, 0x92, 0x41, 0x44, 0x32, 0x42, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xad,
	0xe5, 0xbf, 0x83, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0xbf, 0x85, 0xe5,
	0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0xad, 0x97, 0xe7, 0xac,
	0xa6, 0xe4, 0xb8, 0xb2, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5,
	0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x31, 0x7e, 0x36, 0x34, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x72, 0x0a, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x59, 0x92, 0x41, 0x4c, 0x32, 0x4a,
	0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xad, 0xe5, 0xbf, 0x83, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0x20, 0xe9, 0x80, 0x89, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82,
	0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99,
	0x90, 0xe5, 0x88, 0xb6, 0x30, 0x7e, 0x31, 0x30, 0x32, 0x34, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x00, 0x18, 0x80, 0x08, 0x48, 0x00, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12,
	0x9e, 0x01, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x89,
	0x01, 0x92, 0x41, 0x7f, 0x32, 0x7d, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xad, 0xe5, 0xbf, 0x83, 0xe5,
	0xad, 0x98, 0xe5, 0x82, 0xa8, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe5, 0xbf,
	0x85, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0x31, 0xef, 0xbc,
	0x9a, 0x69, 0x70, 0x66, 0x73, 0xef, 0xbc, 0x9b, 0x32, 0xef, 0xbc, 0x9a, 0x6f, 0x62, 0x73, 0xef,
	0xbc, 0x9b, 0x33, 0xef, 0xbc, 0x9a, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0xef, 0xbc, 0x9b, 0x2e, 0x2e,
	0x2e, 0xef, 0xbc, 0x8c, 0xe5, 0xbf, 0x85, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef,
	0xbc, 0x8c, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x5b, 0x31,
	0x2c, 0x7e, 0x29, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x86, 0x02, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x42, 0xe9, 0x01, 0x92, 0x41, 0xde, 0x01, 0x32, 0xdb, 0x01, 0xe5, 0x88, 0x86,
	0xe4, 0xb8, 0xad, 0xe5, 0xbf, 0x83, 0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0xef, 0xbc, 0x8c, 0xe5,
	0xbf, 0x85, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe6, 0x8c,
	0x89, 0xe4, 0xbd, 0x8d, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0xef, 0xbc, 0x8c, 0xe7, 0xbd, 0xae,
	0xe4, 0xbd, 0x8d, 0x31, 0xe5, 0x88, 0x99, 0xe5, 0xb8, 0xa6, 0xe6, 0x9c, 0x89, 0xe8, 0xaf, 0xa5,
	0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0xef, 0xbc, 0x8c, 0xe4, 0xbb, 0x8e, 0xe5, 0x8f, 0xb3, 0xe5,
	0x90, 0x91, 0xe5, 0xb7, 0xa6, 0xef, 0xbc, 0x8c, 0xe7, 0xac, 0xac, 0xe4, 0xb8, 0x80, 0xe4, 0xbd,
	0x8d, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0xba,
	0xe7, 0xbc, 0x93, 0xe5, 0xad, 0x98, 0xe4, 0xb8, 0xad, 0xe5, 0xbf, 0x83, 0xef, 0xbc, 0x8c, 0xe7,
	0xac, 0xac, 0xe4, 0xba, 0x8c, 0xe4, 0xbd, 0x8d, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0xe6, 0x98,
	0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0xba, 0xe6, 0x8c, 0x81, 0xe4, 0xb9, 0x85, 0xe5, 0x8c, 0x96,
	0xe4, 0xb8, 0xad, 0xe5, 0xbf, 0x83, 0xef, 0xbc, 0x8c, 0xe5, 0xbf, 0x85, 0xe5, 0xa1, 0xab, 0xe5,
	0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0xe9, 0x99, 0x90,
	0xe5, 0x88, 0xb6, 0x5b, 0x31, 0x2c, 0x7e, 0x29, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0xaf, 0x01, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x91, 0x01, 0x92, 0x41, 0x83,
	0x01, 0x32, 0x80, 0x01, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xad, 0xe5, 0xbf, 0x83, 0xe9, 0x85, 0x8d,
	0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0x20, 0xe9, 0x80, 0x89, 0xe5, 0xa1,
	0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0x85, 0xb6, 0xe4, 0xb8, 0xad,
	0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0xe3, 0x80, 0x81, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0xe4,
	0xb8, 0xba, 0xe5, 0x8a, 0xa0, 0xe5, 0xaf, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc,
	0x8c, 0xe5, 0xbf, 0x85, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c,
	0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef,
	0xbc, 0x8c, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x30, 0x7e,
	0x34, 0x30, 0x39, 0x36, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x00, 0x18, 0x80, 0x20, 0x48, 0x01,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x3a, 0x7d, 0x92, 0x41, 0x7a,
	0x0a, 0x78, 0x2a, 0x27, 0xe6, 0x96, 0xb0, 0xe5, 0xa2, 0x9e, 0xe5, 0xad, 0x98, 0xe5, 0x82, 0xa8,
	0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xad, 0xe5, 0xbf, 0x83, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x32, 0x34, 0xe6, 0x96, 0xb0,
	0xe5, 0xa2, 0x9e, 0xe5, 0xad, 0x98, 0xe5, 0x82, 0xa8, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xad, 0xe5,
	0xbf, 0x83, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x20, 0x50, 0x6f, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x04, 0x74, 0x79, 0x70, 0x65, 0xd2,
	0x01, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x90,
	0x05, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x57, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x37, 0x92, 0x41, 0x2d, 0x32, 0x2b, 0xe9, 0xa1, 0xb5, 0xe7, 0xa0, 0x81, 0xef, 0xbc,
	0x8c, 0xe5, 0xbf, 0x85, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c,
	0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe5, 0xa4, 0xa7, 0xe4,
	0xba, 0x8e, 0x30, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x5f, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x41, 0x92, 0x41, 0x35, 0x32, 0x33,
	0xe5, 0x8d, 0x95, 0xe9, 0xa1, 0xb5, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe6, 0x95, 0xb0, 0xef,
	0xbc, 0x8c, 0xe5, 0xbf, 0x85, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x2c, 0x20,
	0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x5b, 0x31, 0x2c, 0x31,
	0x30, 0x30, 0x29, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x10, 0x64, 0x20, 0x00, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x5f, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0x92, 0x41, 0x36, 0x32, 0x34, 0xe6,
	0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xef, 0xbc, 0x8c, 0xe9, 0x80,
	0x89, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x2c, 0x20, 0xe5, 0xad, 0x97, 0xe7,
	0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88,
	0xb6, 0x31, 0x7e, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x07, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x62, 0x79, 0x88, 0x01, 0x01, 0x12, 0x67, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x46, 0x92, 0x41, 0x33, 0x32,
	0x31, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c,
	0xe9, 0x80, 0x89, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x2c, 0x20, 0xe5, 0x8f,
	0x96, 0xe5, 0x80, 0xbc, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0x61, 0x73, 0x63, 0x2c, 0x64, 0x65,
	0x73, 0x63, 0xfa, 0x42, 0x0d, 0x72, 0x0b, 0x52, 0x03, 0x61, 0x73, 0x63, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x48, 0x01, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x67, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x48, 0x92, 0x41, 0x3e, 0x32, 0x3c, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xad, 0xe5,
	0xbf, 0x83, 0x69, 0x64, 0xef, 0xbc, 0x8c, 0xe9, 0x80, 0x89, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82,
	0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x2c, 0x20, 0xe5, 0x8f, 0x96, 0xe5, 0x80, 0xbc, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4,
	0x5b, 0x30, 0x2c, 0x7e, 0x29, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x48, 0x02, 0x52, 0x07,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x88, 0x01, 0x01, 0x3a, 0x70, 0x92, 0x41, 0x6d, 0x0a,
	0x6b, 0x2a, 0x21, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xad, 0xe5,
	0xbf, 0x83, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f,
	0x82, 0xe6, 0x95, 0xb0, 0x32, 0x2d, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x88, 0x86, 0xe4,
	0xb8, 0xad, 0xe5, 0xbf, 0x83, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x20, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0xd2, 0x01, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0xd2, 0x01, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x62, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x22, 0x8e, 0x03, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x4d, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x39, 0x92, 0x41, 0x36, 0x32, 0x34, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xa0, 0x81, 0xef,
	0xbc, 0x8c, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc,
	0x8c, 0xe9, 0x9d, 0x9e, 0x30, 0xe5, 0x8d, 0xb3, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0xa4,
	0x84, 0xe7, 0x90, 0x86, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x70, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x56, 0x92, 0x41, 0x53, 0x32, 0x51, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5,
	0xa4, 0x84, 0xe7, 0x90, 0x86, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe6, 0x97, 0xb6, 0xef, 0xbc,
	0x8c, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab, 0xe7, 0x9b, 0xb8, 0xe5, 0xba, 0x94, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x64, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x70, 0x63, 0x6c, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x67, 0x6f, 0x2e, 0x75, 0x72,
	0x63, 0x68, 0x69, 0x6e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12,
	0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x95, 0xb0, 0xe6,
	0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x58, 0x92, 0x41, 0x55, 0x0a, 0x53, 0x2a,
	0x21, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xad, 0xe5, 0xbf, 0x83,
	0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0x32, 0x2e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xad,
	0xe5, 0xbf, 0x83, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x20, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x22, 0xcb, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe8, 0xae, 0xb0, 0xe5,
	0xbd, 0x95, 0xe6, 0x95, 0xb0, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x32, 0x15, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xad, 0xe5, 0xbf, 0x83, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x3a, 0x4d, 0x92, 0x41, 0x4a, 0x0a, 0x48, 0x2a, 0x0f, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xad,
	0xe5, 0xbf, 0x83, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x32, 0x26, 0xe5, 0x88, 0x86, 0xe4, 0xb8,
	0xad, 0xe5, 0xbf, 0x83, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0x3a, 0x20, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74,
	0x61, 0xd2, 0x01, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0xd2, 0x01, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0xa0, 0x09, 0x0a, 0x0a, 0x50, 0x75, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x62, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x48, 0x92, 0x41, 0x3e, 0x32, 0x3c, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xad, 0xe5, 0xbf, 0x83,
	0x69, 0x64, 0xef, 0xbc, 0x8c, 0xe5, 0xbf, 0x85, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0x2c, 0x20, 0xe5, 0x8f, 0x96, 0xe5, 0x80, 0xbc, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0x5b, 0x30,
	0x2c, 0x7e, 0x29, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x12, 0x69, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x50, 0x92, 0x41, 0x44, 0x32, 0x42, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xad, 0xe5, 0xbf,
	0x83, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xef, 0xbc, 0x8c, 0xe9, 0x80, 0x89, 0xe5, 0xa1, 0xab,
	0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4,
	0xb8, 0xb2, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6,
	0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x31, 0x7e, 0x36, 0x34, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10,
	0x01, 0x18, 0x40, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x72,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x59, 0x92, 0x41,
	0x4c, 0x32, 0x4a, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xad, 0xe5, 0xbf, 0x83, 0xe6, 0x8f, 0x8f, 0xe8,
	0xbf, 0xb0, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0x20, 0xe9, 0x80, 0x89, 0xe5, 0xa1, 0xab,
	0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4,
	0xb8, 0xb2, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe9, 0x95, 0xbf, 0xe5, 0xba,
	0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x30, 0x7e, 0x31, 0x30, 0x32, 0x34, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x00, 0x18, 0x80, 0x08, 0x48, 0x01, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x88,
	0x01, 0x01, 0x12, 0xa2, 0x01, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x88, 0x01, 0x92, 0x41, 0x7e, 0x32, 0x7c, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xad, 0xe5,
	0xbf, 0x83, 0xe5, 0xad, 0x98, 0xe5, 0x82, 0xa8, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20,
	0xe9, 0x80, 0x89, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0x31,
	0xef, 0xbc, 0x9a, 0x69, 0x70, 0x66, 0x73, 0xef, 0xbc, 0x9b, 0x32, 0xef, 0xbc, 0x9a, 0x6f, 0x62,
	0x73, 0xef, 0xbc, 0x9b, 0x33, 0xef, 0xbc, 0x9a, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0xef, 0xbc, 0x9b,
	0x2e, 0x2e, 0x2e, 0xef, 0xbc, 0x8c, 0xe5, 0xbf, 0x85, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6,
	0x5b, 0x31, 0x2c, 0x7e, 0x29, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x48, 0x02, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x8a, 0x02, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0xe8, 0x01, 0x92, 0x41, 0xdd,
	0x01, 0x32, 0xda, 0x01, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xad, 0xe5, 0xbf, 0x83, 0xe5, 0xb1, 0x9e,
	0xe6, 0x80, 0xa7, 0x2c, 0x20, 0xe9, 0x80, 0x89, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0xef, 0xbc, 0x8c, 0xe6, 0x8c, 0x89, 0xe4, 0xbd, 0x8d, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86,
	0xef, 0xbc, 0x8c, 0xe7, 0xbd, 0xae, 0xe4, 0xbd, 0x8d, 0x31, 0xe5, 0x88, 0x99, 0xe5, 0xb8, 0xa6,
	0xe6, 0x9c, 0x89, 0xe8, 0xaf, 0xa5, 0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0xef, 0xbc, 0x8c, 0xe4,
	0xbb, 0x8e, 0xe5, 0x8f, 0xb3, 0xe5, 0x90, 0x91, 0xe5, 0xb7, 0xa6, 0xef, 0xbc, 0x8c, 0xe7, 0xac,
	0xac, 0xe4, 0xb8, 0x80, 0xe4, 0xbd, 0x8d, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0xe6, 0x98, 0xaf,
	0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0xba, 0xe7, 0xbc, 0x93, 0xe5, 0xad, 0x98, 0xe4, 0xb8, 0xad, 0xe5,
	0xbf, 0x83, 0xef, 0xbc, 0x8c, 0xe7, 0xac, 0xac, 0xe4, 0xba, 0x8c, 0xe4, 0xbd, 0x8d, 0xe6, 0xa0,
	0x87, 0xe8, 0xaf, 0x86, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0xba, 0xe6, 0x8c, 0x81,
	0xe4, 0xb9, 0x85, 0xe5, 0x8c, 0x96, 0xe4, 0xb8, 0xad, 0xe5, 0xbf, 0x83, 0xef, 0xbc, 0x8c, 0xe5,
	0xbf, 0x85, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe6, 0x95,
	0xb4, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb0,
	0xe5, 0x80, 0xbc, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x5b, 0x31, 0x2c, 0x7e, 0x29, 0xfa, 0x42,
	0x04, 0x1a, 0x02, 0x20, 0x00, 0x48, 0x03, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x83, 0x01, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x66, 0x92, 0x41, 0x5c, 0x32, 0x5a, 0xe5, 0x88, 0x86, 0xe4,
	0xb8, 0xad, 0xe5, 0xbf, 0x83, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x2c, 0x20, 0xe9, 0x80, 0x89,
	0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb4, 0xe6,
	0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb0, 0xe5, 0x80,
	0xbc, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x5b, 0x30, 0x2c, 0x7e, 0x29, 0xef, 0xbc, 0x8c, 0x31,
	0xef, 0xbc, 0x9a, 0xe5, 0x9c, 0xa8, 0xe7, 0xba, 0xbf, 0xef, 0xbc, 0x9b, 0x32, 0xef, 0xbc, 0x9a,
	0xe7, 0xa6, 0xbb, 0xe7, 0xba, 0xbf, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x48, 0x04, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x76, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x59, 0x92, 0x41, 0x4c, 0x32,
	0x4a, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xad, 0xe5, 0xbf, 0x83, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0x20, 0xe9, 0x80, 0x89, 0xe5, 0xa1, 0xab, 0xe5, 0x8f,
	0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9,
	0x99, 0x90, 0xe5, 0x88, 0xb6, 0x30, 0x7e, 0x34, 0x30, 0x39, 0x36, 0xfa, 0x42, 0x07, 0x72, 0x05,
	0x10, 0x00, 0x18, 0x80, 0x20, 0x48, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88,
	0x01, 0x01, 0x3a, 0x61, 0x92, 0x41, 0x5e, 0x0a, 0x5c, 0x2a, 0x21, 0xe6, 0x9b, 0xb4, 0xe6, 0x96,
	0xb0, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xad, 0xe5, 0xbf, 0x83, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3,
	0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x32, 0x2d, 0xe6, 0x9b,
	0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0x88, 0x86, 0xe4, 0xb8, 0xad, 0xe5, 0xbf, 0x83, 0xe8, 0xaf, 0xb7,
	0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a,
	0x20, 0x50, 0x75, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0xd2, 0x01, 0x07, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0xfb, 0x04, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x12, 0x56, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x36, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0xe9, 0xa1, 0xb5,
	0xe7, 0xa0, 0x81, 0xef, 0xbc, 0x8c, 0xe5, 0xbf, 0x85, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0x2c, 0x20, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6,
	0xe5, 0xa4, 0xa7, 0xe4, 0xba, 0x8e, 0x30, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x60, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x42, 0x92,
	0x41, 0x36, 0x32, 0x34, 0xe5, 0x8d, 0x95, 0xe9, 0xa1, 0xb5, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95,
	0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0xbf, 0x85, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0xe9, 0x99, 0x90, 0xe5, 0x88,
	0xb6, 0x5b, 0x31, 0x2c, 0x31, 0x30, 0x30, 0x29, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x10, 0x64, 0x20,
	0x00, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x60, 0x0a, 0x07,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x41, 0x92,
	0x41, 0x37, 0x32, 0x35, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5,
	0xef, 0xbc, 0x8c, 0xe9, 0x80, 0x89, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef,
	0xbc, 0x8c, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe9, 0x95, 0xbf, 0xe5, 0xba,
	0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x31, 0x7e, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x48, 0x00, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x88, 0x01, 0x01, 0x12, 0x68,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x47, 0x92, 0x41, 0x34, 0x32, 0x32, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe9, 0x80, 0x89, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6,
	0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0x96, 0xe5, 0x80, 0xbc, 0xe8, 0x8c, 0x83, 0xe5, 0x9b,
	0xb4, 0x61, 0x73, 0x63, 0x2c, 0x64, 0x65, 0x73, 0x63, 0xfa, 0x42, 0x0d, 0x72, 0x0b, 0x52, 0x03,
	0x61, 0x73, 0x63, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x48, 0x01, 0x52, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x62, 0x79, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x37, 0x92, 0x41, 0x2d, 0x32, 0x2b,
	0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x69, 0x64, 0xef, 0xbc, 0x8c, 0xe9, 0x80, 0x89, 0xe5, 0xa1,
	0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc,
	0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x5b, 0x31, 0x2c, 0x7e, 0x29, 0xfa, 0x42, 0x04, 0x1a, 0x02,
	0x20, 0x00, 0x48, 0x02, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x3a, 0x6a, 0x92, 0x41, 0x67, 0x0a, 0x65, 0x2a, 0x1e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4,
	0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1,
	0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x32, 0x2a, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4,
	0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x20, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0xd2, 0x01, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0xd2, 0x01, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x62, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x22, 0x88, 0x03, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x4d, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x39, 0x92, 0x41, 0x36, 0x32, 0x34, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0xa0, 0x81, 0xef,
	0xbc, 0x8c, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc,
	0x8c, 0xe9, 0x9d, 0x9e, 0x30, 0xe5, 0x8d, 0xb3, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0xa4,
	0x84, 0xe7, 0x90, 0x86, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x70, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x56, 0x92, 0x41, 0x53, 0x32, 0x51, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5,
	0xa4, 0x84, 0xe7, 0x90, 0x86, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe6, 0x97, 0xb6, 0xef, 0xbc,
	0x8c, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab, 0xe7, 0x9b, 0xb8, 0xe5, 0xba, 0x94, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x64, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x70, 0x63, 0x6c, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x67, 0x6f, 0x2e, 0x75, 0x72,
	0x63, 0x68, 0x69, 0x6e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12,
	0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x95, 0xb0, 0xe6,
	0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x52, 0x92, 0x41, 0x4f, 0x0a, 0x4d, 0x2a,
	0x1e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0x8e, 0xa5,
	0xe5, 0x8f, 0xa3, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x32,
	0x2b, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a,
	0x20, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x22, 0xe1, 0x01, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x24, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe6, 0x95, 0xb0, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x5f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x63, 0x6c, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x67,
	0x6f, 0x2e, 0x75, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe4,
	0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x47, 0x92, 0x41, 0x44, 0x0a, 0x42, 0x2a, 0x0c,
	0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x32, 0x23, 0xe4, 0xbb,
	0xbb, 0xe5, 0x8a, 0xa1, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0x3a, 0x20, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74,
	0x61, 0xd2, 0x01, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0xd2, 0x01, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0xd7, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x39, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x17, 0x92, 0x41, 0x14,
	0x32, 0x12, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0x9f, 0xba, 0xe6, 0x9c, 0xac, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x3f, 0x0a, 0x05, 0x65, 0x78,
	0x65, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x42, 0x17, 0x92, 0x41, 0x14,
	0x32, 0x12, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x05, 0x65, 0x78, 0x65, 0x63, 0x73, 0x3a, 0x4d, 0x92, 0x41, 0x4a,
	0x0a, 0x48, 0x2a, 0x12, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x32, 0x24, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe8, 0xaf,
	0xa6, 0xe7, 0xbb, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0x3a, 0x20, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0xd2, 0x01, 0x04, 0x74,
	0x61, 0x73, 0x6b, 0xd2, 0x01, 0x04, 0x65, 0x78, 0x65, 0x63, 0x22, 0xc7, 0x03, 0x0a, 0x0d, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x60, 0x0a, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x46, 0x92,
	0x41, 0x3c, 0x32, 0x3a, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x69, 0x64, 0xef, 0xbc, 0x8c, 0xe5,
	0xbf, 0x85, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe6, 0x95,
	0xb4, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb0,
	0xe5, 0x80, 0xbc, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x5b, 0x31, 0x2c, 0x7e, 0x29, 0xfa, 0x42,
	0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x12, 0x7c,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x64,
	0x92, 0x41, 0x5a, 0x32, 0x58, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0xbb, 0x93, 0xe6, 0x9e,
	0x9c, 0xef, 0xbc, 0x8c, 0xe5, 0xbf, 0x85, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef,
	0xbc, 0x8c, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x5b, 0x30,
	0x2c, 0x7e, 0x29, 0xef, 0xbc, 0x8c, 0x31, 0xef, 0xbc, 0x9a, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f,
	0xef, 0xbc, 0x9b, 0x32, 0xef, 0xbc, 0x9a, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xfa, 0x42, 0x04,
	0x1a, 0x02, 0x28, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x62, 0x0a, 0x06,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x45, 0x92, 0x41,
	0x3b, 0x32, 0x39, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe9, 0x80,
	0x89, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0xad, 0x97,
	0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x00, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x88, 0x01, 0x01,
	0x3a, 0x67, 0x92, 0x41, 0x64, 0x0a, 0x62, 0x2a, 0x1e, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5,
	0xae, 0x8c, 0xe6, 0x88, 0x90, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1,
	0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x32, 0x2d, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5,
	0xae, 0x8c, 0xe6, 0x88, 0x90, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x20, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0xd2, 0x01, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0xd2, 0x01, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x22, 0xcf, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x60, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x46, 0x92, 0x41, 0x3c, 0x32, 0x3a, 0xe4, 0xbb, 0xbb,
	0xe5, 0x8a, 0xa1, 0x69, 0x64, 0xef, 0xbc, 0x8c, 0xe5, 0xbf, 0x85, 0xe5, 0xa1, 0xab, 0xe5, 0x8f,
	0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0xe9, 0x99, 0x90, 0xe5,
	0x88, 0xb6, 0x5b, 0x31, 0x2c, 0x7e, 0x29, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x3a, 0x5d, 0x92, 0x41, 0x5a, 0x0a, 0x58, 0x2a, 0x1e,
	0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe9, 0x87, 0x8d, 0xe8, 0xaf, 0x95, 0xe6, 0x8e, 0xa5, 0xe5,
	0x8f, 0xa3, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x32, 0x2c,
	0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe9, 0x87, 0x8d, 0xe8, 0xaf, 0x95, 0xe8, 0xaf, 0xb7, 0xe6,
	0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x20,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0xd2, 0x01, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x22, 0xd1, 0x01, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x60, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x46, 0x92, 0x41, 0x3c, 0x32, 0x3a,
	0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x69, 0x64, 0xef, 0xbc, 0x8c, 0xe5, 0xbf, 0x85, 0xe5, 0xa1,
	0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0xe9,
	0x99, 0x90, 0xe5, 0x88, 0xb6, 0x5b, 0x31, 0x2c, 0x7e, 0x29, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20,
	0x00, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x3a, 0x5e, 0x92, 0x41, 0x5b, 0x0a,
	0x59, 0x2a, 0x1e, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0x8f, 0x96, 0xe6, 0xb6, 0x88, 0xe6,
	0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0x32, 0x2d, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0x8f, 0x96, 0xe6, 0xb6, 0x88, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0x3a, 0x20, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0xd2, 0x01, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x22, 0xc2, 0x03, 0x0a, 0x0d, 0x50,
	0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x62, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x50, 0x92, 0x41, 0x44, 0x32, 0x42,
	0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe9, 0xa1, 0xb9, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xef,
	0xbc, 0x8c, 0xe5, 0xbf, 0x85, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc,
	0x8c, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0x2c, 0x20, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x31, 0x7e,
	0x36, 0x34, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x66, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x50, 0x92, 0x41, 0x43, 0x32, 0x41, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe9, 0xa1, 0xb9, 0xe5,
	0x80, 0xbc, 0x2c, 0x20, 0xe5, 0xbf, 0x85, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0xef, 0xbc, 0x8c, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88,
	0xb6, 0x30, 0x7e, 0x31, 0x30, 0x32, 0x34, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x00, 0x18, 0x80,
	0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x72, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x59, 0x92, 0x41, 0x4c, 0x32, 0x4a, 0xe9, 0x85, 0x8d,
	0xe7, 0xbd, 0xae, 0xe9, 0xa1, 0xb9, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x2c, 0x20, 0xe9, 0x80, 0x89, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0xef, 0xbc, 0x8c, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88,
	0xb6, 0x30, 0x7e, 0x31, 0x30, 0x32, 0x34, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x00, 0x18, 0x80,
	0x08, 0x48, 0x00, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x3a, 0x68, 0x92, 0x41,
	0x65, 0x0a, 0x63, 0x2a, 0x21, 0xe6, 0x96, 0xb0, 0xe5, 0xa2, 0x9e, 0xe9, 0x85, 0x8d, 0xe7, 0xbd,
	0xae, 0xe9, 0xa1, 0xb9, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82,
	0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x32, 0x30, 0xe6, 0x96, 0xb0, 0xe5, 0xa2, 0x9e, 0xe9, 0x85,
	0x8d, 0xe7, 0xbd, 0xae, 0xe9, 0xa1, 0xb9, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82,
	0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x20, 0x50, 0x6f, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0xd2, 0x01, 0x03, 0x6b, 0x65, 0x79, 0xd2, 0x01,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x22,
	0xa4, 0x06, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x12, 0x57, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x37, 0x92, 0x41, 0x2d, 0x32, 0x2b, 0xe9, 0xa1, 0xb5, 0xe7, 0xa0,
	0x81, 0xef, 0xbc, 0x8c, 0xe5, 0xbf, 0x85, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe5,
	0xa4, 0xa7, 0xe4, 0xba, 0x8e, 0x30, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x60, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x42, 0x92, 0x41,
	0x36, 0x32, 0x34, 0xe5, 0x8d, 0x95, 0xe9, 0xa1, 0xb5, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe6,
	0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0xbf, 0x85, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6,
	0x5b, 0x31, 0x2c, 0x31, 0x30, 0x30, 0x29, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x10, 0x64, 0x20, 0x00,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x60, 0x0a, 0x07, 0x73,
	0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x41, 0x92, 0x41,
	0x37, 0x32, 0x35, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xef,
	0xbc, 0x8c, 0xe9, 0x80, 0x89, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc,
	0x8c, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6,
	0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x31, 0x7e, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x48,
	0x00, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x88, 0x01, 0x01, 0x12, 0x68, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x47, 0x92, 0x41, 0x34, 0x32, 0x32, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe9, 0x80, 0x89, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0x96, 0xe5, 0x80, 0xbc, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4,
	0x61, 0x73, 0x63, 0x2c, 0x64, 0x65, 0x73, 0x63, 0xfa, 0x42, 0x0d, 0x72, 0x0b, 0x52, 0x03, 0x61,
	0x73, 0x63, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x48, 0x01, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x62, 0x79, 0x88, 0x01, 0x01, 0x12, 0x67, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x50, 0x92, 0x41, 0x44, 0x32, 0x42, 0xe9, 0x85, 0x8d, 0xe7, 0xbd,
	0xae, 0xe9, 0xa1, 0xb9, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xef, 0xbc, 0x8c, 0xe9, 0x80, 0x89,
	0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0xad, 0x97, 0xe7,
	0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0xe9, 0x95, 0xbf,
	0xe5, 0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x31, 0x7e, 0x36, 0x34, 0xfa, 0x42, 0x06,
	0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x48, 0x02, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x83, 0x01, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x66, 0x92, 0x41, 0x5c, 0x32, 0x5a, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe9, 0xa1,
	0xb9, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x2c, 0x20, 0xe9, 0x80, 0x89, 0xe5, 0xa1, 0xab, 0xe5,
	0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0xe9, 0x99, 0x90,
	0xe5, 0x88, 0xb6, 0x5b, 0x30, 0x2c, 0x7e, 0x29, 0xef, 0xbc, 0x8c, 0x31, 0xef, 0xbc, 0x9a, 0xe6,
	0x9c, 0x89, 0xe6, 0x95, 0x88, 0xef, 0xbc, 0x9b, 0x32, 0xef, 0xbc, 0x9a, 0xe6, 0x97, 0xa0, 0xe6,
	0x95, 0x88, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x48, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x3a, 0x72, 0x92, 0x41, 0x6f, 0x0a, 0x6d, 0x2a, 0x21, 0xe8,
	0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe9, 0xa1, 0xb9, 0xe6, 0x8e,
	0xa5, 0xe5, 0x8f, 0xa3, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0,
	0x32, 0x2f, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe9, 0xa1,
	0xb9, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0x3a, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0xd2, 0x01, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0xd2, 0x01,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73,
	0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x62, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x94, 0x03, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x39, 0x92, 0x41, 0x36, 0x32, 0x34, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe7, 0xa0, 0x81, 0xef, 0xbc, 0x8c, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe9, 0x9d, 0x9e, 0x30, 0xe5, 0x8d, 0xb3, 0xe6,
	0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0xa4, 0x84, 0xe7, 0x90, 0x86, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4,
	0xa5, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x70, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x56, 0x92, 0x41, 0x53, 0x32, 0x51, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe5, 0xad,
	0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c,
	0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0xa4, 0x84, 0xe7, 0x90, 0x86, 0xe5, 0xa4, 0xb1, 0xe8,
	0xb4, 0xa5, 0xe6, 0x97, 0xb6, 0xef, 0xbc, 0x8c, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab, 0xe7, 0x9b,
	0xb8, 0xe5, 0xba, 0x94, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x66, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x63, 0x6c, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x67, 0x6f, 0x2e, 0x75, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x3a, 0x5a, 0x92, 0x41, 0x57, 0x0a, 0x55, 0x2a, 0x21, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96,
	0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe9, 0xa1, 0xb9, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x32, 0x30, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe9, 0xa1, 0xb9, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a, 0x20,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0xc1, 0x01,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe6,
	0x95, 0xb0, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe9, 0x85,
	0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x49, 0x92, 0x41, 0x46, 0x0a, 0x44, 0x2a, 0x0c, 0xe9,
	0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x32, 0x25, 0xe9, 0x85, 0x8d,
	0xe7, 0xbd, 0xae, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x3a,
	0x20, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61,
	0x74, 0x61, 0xd2, 0x01, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0xd2, 0x01, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0xde, 0x04, 0x0a, 0x0c, 0x50, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x12, 0x68, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x56, 0x92, 0x41, 0x4a, 0x32, 0x48, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe9, 0xa1, 0xb9, 0xe5,
	0x94, 0xaf, 0xe4, 0xb8, 0x80, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0xef, 0xbc, 0x8c, 0xe5, 0xbf,
	0x85, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0xad, 0x97,
	0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x2c, 0x20, 0xe9, 0x95,
	0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x31, 0x7e, 0x36, 0x34, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x6b, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x50, 0x92, 0x41, 0x43,
	0x32, 0x41, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe9, 0xa1, 0xb9, 0xe5, 0x80, 0xbc, 0x2c, 0x20,
	0xe9, 0x80, 0x89, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe5,
	0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc,
	0x8c, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x30, 0x7e, 0x31,
	0x30, 0x32, 0x34, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x00, 0x18, 0x80, 0x08, 0x48, 0x00, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x83, 0x01, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x66, 0x92, 0x41, 0x5c, 0x32,
	0x5a, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe9, 0xa1, 0xb9, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0x2c, 0x20, 0xe9, 0x80, 0x89, 0xe5, 0xa1, 0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc,
	0x8c, 0xe6, 0x95, 0xb4, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c,
	0xe6, 0x95, 0xb0, 0xe5, 0x80, 0xbc, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x5b, 0x30, 0x2c, 0x7e,
	0x29, 0xef, 0xbc, 0x8c, 0x31, 0xef, 0xbc, 0x9a, 0xe6, 0x9c, 0x89, 0xe6, 0x95, 0x88, 0xef, 0xbc,
	0x9b, 0x32, 0xef, 0xbc, 0x9a, 0xe6, 0x97, 0xa0, 0xe6, 0x95, 0x88, 0xfa, 0x42, 0x04, 0x1a, 0x02,
	0x28, 0x00, 0x48, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x72, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x59, 0x92,
	0x41, 0x4c, 0x32, 0x4a, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe9, 0xa1, 0xb9, 0xe6, 0x8f, 0x8f,
	0xe8, 0xbf, 0xb0, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0x20, 0xe9, 0x80, 0x89, 0xe5, 0xa1,
	0xab, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xef, 0xbc, 0x8c, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6,
	0xe4, 0xb8, 0xb2, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0xe9, 0x95, 0xbf, 0xe5,
	0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x30, 0x7e, 0x31, 0x30, 0x32, 0x34, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x00, 0x18, 0x80, 0x08, 0x48, 0x02, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x88, 0x01, 0x01, 0x3a, 0x5f, 0x92, 0x41, 0x5c, 0x0a, 0x5a, 0x2a, 0x21, 0xe6, 0x9b, 0xb4, 0xe6,
	0x96, 0xb0, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe9, 0xa1, 0xb9, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f,
	0xa3, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x32, 0x2f, 0xe6,
	0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe9, 0xa1, 0xb9, 0xe8, 0xaf,
	0xb7, 0xe6, 0xb1, 0x82, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0x3a, 0x20, 0x50, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0xd2, 0x01,
	0x03, 0x6b, 0x65, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x42, 0x66, 0x92, 0x41, 0x43, 0x12, 0x1a, 0x0a, 0x0c, 0xe5, 0xad, 0x98, 0xe5, 0x82,
	0xa8, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0x2a, 0x05, 0x0a, 0x03, 0x4d, 0x49, 0x54, 0x32, 0x03,
	0x31, 0x2e, 0x30, 0x2a, 0x01, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x1e, 0x70, 0x63, 0x6c, 0x2d,
	0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2d, 0x75, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_api_v1_urchin_proto_rawDescOnce sync.Once
	file_api_v1_urchin_proto_rawDescData = file_api_v1_urchin_proto_rawDesc
)

func file_api_v1_urchin_proto_rawDescGZIP() []byte {
	file_api_v1_urchin_proto_rawDescOnce.Do(func() {
		file_api_v1_urchin_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1_urchin_proto_rawDescData)
	})
	return file_api_v1_urchin_proto_rawDescData
}

var file_api_v1_urchin_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_api_v1_urchin_proto_goTypes = []any{
	(*BaseResp)(nil),                                  // 0: pcl.sdk.go.urchin.storage.proto.api.v1.BaseResp
	(*UploadObjectReq)(nil),                           // 1: pcl.sdk.go.urchin.storage.proto.api.v1.UploadObjectReq
	(*UploadObjectResp)(nil),                          // 2: pcl.sdk.go.urchin.storage.proto.api.v1.UploadObjectResp
	(*CreateInitiateMultipartUploadSignedUrlReq)(nil), // 3: pcl.sdk.go.urchin.storage.proto.api.v1.CreateInitiateMultipartUploadSignedUrlReq
	(*CreateUploadPartSignedUrlReq)(nil),              // 4: pcl.sdk.go.urchin.storage.proto.api.v1.CreateUploadPartSignedUrlReq
	(*CreateCompleteMultipartUploadSignedUrlReq)(nil), // 5: pcl.sdk.go.urchin.storage.proto.api.v1.CreateCompleteMultipartUploadSignedUrlReq
	(*CreateSignedUrlResp)(nil),                       // 6: pcl.sdk.go.urchin.storage.proto.api.v1.CreateSignedUrlResp
	(*HeaderValues)(nil),                              // 7: pcl.sdk.go.urchin.storage.proto.api.v1.HeaderValues
	(*DownloadObjectReq)(nil),                         // 8: pcl.sdk.go.urchin.storage.proto.api.v1.DownloadObjectReq
	(*DownloadObjectTaskParams)(nil),                  // 9: pcl.sdk.go.urchin.storage.proto.api.v1.DownloadObjectTaskParams
	(*DownloadObjectResp)(nil),                        // 10: pcl.sdk.go.urchin.storage.proto.api.v1.DownloadObjectResp
	(*CreateListObjectsSignedUrlReq)(nil),             // 11: pcl.sdk.go.urchin.storage.proto.api.v1.CreateListObjectsSignedUrlReq
	(*MigrateObjectReq)(nil),                          // 12: pcl.sdk.go.urchin.storage.proto.api.v1.MigrateObjectReq
	(*MigrateObjectTaskParams)(nil),                   // 13: pcl.sdk.go.urchin.storage.proto.api.v1.MigrateObjectTaskParams
	(*MigrateObjectResp)(nil),                         // 14: pcl.sdk.go.urchin.storage.proto.api.v1.MigrateObjectResp
	(*GetObjectReq)(nil),                              // 15: pcl.sdk.go.urchin.storage.proto.api.v1.GetObjectReq
	(*GetObjectResp)(nil),                             // 16: pcl.sdk.go.urchin.storage.proto.api.v1.GetObjectResp
	(*GetObjectRespData)(nil),                         // 17: pcl.sdk.go.urchin.storage.proto.api.v1.GetObjectRespData
	(*DeleteObjectReq)(nil),                           // 18: pcl.sdk.go.urchin.storage.proto.api.v1.DeleteObjectReq
	(*DeleteObjectResp)(nil),                          // 19: pcl.sdk.go.urchin.storage.proto.api.v1.DeleteObjectResp
	(*PutObjectReq)(nil),                              // 20: pcl.sdk.go.urchin.storage.proto.api.v1.PutObjectReq
	(*PostNodeReq)(nil),                               // 21: pcl.sdk.go.urchin.storage.proto.api.v1.PostNodeReq
	(*GetNodeReq)(nil),                                // 22: pcl.sdk.go.urchin.storage.proto.api.v1.GetNodeReq
	(*GetNodeResp)(nil),                               // 23: pcl.sdk.go.urchin.storage.proto.api.v1.GetNodeResp
	(*GetNodeRespData)(nil),                           // 24: pcl.sdk.go.urchin.storage.proto.api.v1.GetNodeRespData
	(*PutNodeReq)(nil),                                // 25: pcl.sdk.go.urchin.storage.proto.api.v1.PutNodeReq
	(*GetTaskReq)(nil),                                // 26: pcl.sdk.go.urchin.storage.proto.api.v1.GetTaskReq
	(*GetTaskResp)(nil),                               // 27: pcl.sdk.go.urchin.storage.proto.api.v1.GetTaskResp
	(*GetTaskRespData)(nil),                           // 28: pcl.sdk.go.urchin.storage.proto.api.v1.GetTaskRespData
	(*TaskDetail)(nil),                                // 29: pcl.sdk.go.urchin.storage.proto.api.v1.TaskDetail
	(*FinishTaskReq)(nil),                             // 30: pcl.sdk.go.urchin.storage.proto.api.v1.FinishTaskReq
	(*RetryTaskReq)(nil),                              // 31: pcl.sdk.go.urchin.storage.proto.api.v1.RetryTaskReq
	(*CancelTaskReq)(nil),                             // 32: pcl.sdk.go.urchin.storage.proto.api.v1.CancelTaskReq
	(*PostConfigReq)(nil),                             // 33: pcl.sdk.go.urchin.storage.proto.api.v1.PostConfigReq
	(*GetConfigReq)(nil),                              // 34: pcl.sdk.go.urchin.storage.proto.api.v1.GetConfigReq
	(*GetConfigResp)(nil),                             // 35: pcl.sdk.go.urchin.storage.proto.api.v1.GetConfigResp
	(*GetConfigRespData)(nil),                         // 36: pcl.sdk.go.urchin.storage.proto.api.v1.GetConfigRespData
	(*PutConfigReq)(nil),                              // 37: pcl.sdk.go.urchin.storage.proto.api.v1.PutConfigReq
	nil,                                               // 38: pcl.sdk.go.urchin.storage.proto.api.v1.CreateSignedUrlResp.HeaderEntry
	(*module.DataObj)(nil),                            // 39: module.DataObj
	(*module.StorageNode)(nil),                        // 40: module.StorageNode
	(*module.Task)(nil),                               // 41: module.Task
	(*module.TaskExec)(nil),                           // 42: module.TaskExec
	(*module.Config)(nil),                             // 43: module.Config
}
var file_api_v1_urchin_proto_depIdxs = []int32{
	38, // 0: pcl.sdk.go.urchin.storage.proto.api.v1.CreateSignedUrlResp.header:type_name -> pcl.sdk.go.urchin.storage.proto.api.v1.CreateSignedUrlResp.HeaderEntry
	8,  // 1: pcl.sdk.go.urchin.storage.proto.api.v1.DownloadObjectTaskParams.request:type_name -> pcl.sdk.go.urchin.storage.proto.api.v1.DownloadObjectReq
	12, // 2: pcl.sdk.go.urchin.storage.proto.api.v1.MigrateObjectTaskParams.request:type_name -> pcl.sdk.go.urchin.storage.proto.api.v1.MigrateObjectReq
	17, // 3: pcl.sdk.go.urchin.storage.proto.api.v1.GetObjectResp.data:type_name -> pcl.sdk.go.urchin.storage.proto.api.v1.GetObjectRespData
	39, // 4: pcl.sdk.go.urchin.storage.proto.api.v1.GetObjectRespData.list:type_name -> module.DataObj
	24, // 5: pcl.sdk.go.urchin.storage.proto.api.v1.GetNodeResp.data:type_name -> pcl.sdk.go.urchin.storage.proto.api.v1.GetNodeRespData
	40, // 6: pcl.sdk.go.urchin.storage.proto.api.v1.GetNodeRespData.list:type_name -> module.StorageNode
	28, // 7: pcl.sdk.go.urchin.storage.proto.api.v1.GetTaskResp.data:type_name -> pcl.sdk.go.urchin.storage.proto.api.v1.GetTaskRespData
	29, // 8: pcl.sdk.go.urchin.storage.proto.api.v1.GetTaskRespData.list:type_name -> pcl.sdk.go.urchin.storage.proto.api.v1.TaskDetail
	41, // 9: pcl.sdk.go.urchin.storage.proto.api.v1.TaskDetail.task:type_name -> module.Task
	42, // 10: pcl.sdk.go.urchin.storage.proto.api.v1.TaskDetail.execs:type_name -> module.TaskExec
	36, // 11: pcl.sdk.go.urchin.storage.proto.api.v1.GetConfigResp.data:type_name -> pcl.sdk.go.urchin.storage.proto.api.v1.GetConfigRespData
	43, // 12: pcl.sdk.go.urchin.storage.proto.api.v1.GetConfigRespData.list:type_name -> module.Config
	7,  // 13: pcl.sdk.go.urchin.storage.proto.api.v1.CreateSignedUrlResp.HeaderEntry.value:type_name -> pcl.sdk.go.urchin.storage.proto.api.v1.HeaderValues
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_api_v1_urchin_proto_init() }
func file_api_v1_urchin_proto_init() {
	if File_api_v1_urchin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_v1_urchin_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*BaseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*UploadObjectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*UploadObjectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CreateInitiateMultipartUploadSignedUrlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CreateUploadPartSignedUrlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CreateCompleteMultipartUploadSignedUrlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CreateSignedUrlResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*HeaderValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*DownloadObjectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*DownloadObjectTaskParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*DownloadObjectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CreateListObjectsSignedUrlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*MigrateObjectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*MigrateObjectTaskParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*MigrateObjectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*GetObjectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*GetObjectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*GetObjectRespData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteObjectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteObjectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*PutObjectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*PostNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*GetNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*GetNodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*GetNodeRespData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*PutNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*GetTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*GetTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*GetTaskRespData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*TaskDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*FinishTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*RetryTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*CancelTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*PostConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*GetConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*GetConfigResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*GetConfigRespData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_urchin_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*PutConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_v1_urchin_proto_msgTypes[1].OneofWrappers = []any{}
	file_api_v1_urchin_proto_msgTypes[8].OneofWrappers = []any{}
	file_api_v1_urchin_proto_msgTypes[12].OneofWrappers = []any{}
	file_api_v1_urchin_proto_msgTypes[15].OneofWrappers = []any{}
	file_api_v1_urchin_proto_msgTypes[20].OneofWrappers = []any{}
	file_api_v1_urchin_proto_msgTypes[21].OneofWrappers = []any{}
	file_api_v1_urchin_proto_msgTypes[22].OneofWrappers = []any{}
	file_api_v1_urchin_proto_msgTypes[25].OneofWrappers = []any{}
	file_api_v1_urchin_proto_msgTypes[26].OneofWrappers = []any{}
	file_api_v1_urchin_proto_msgTypes[30].OneofWrappers = []any{}
	file_api_v1_urchin_proto_msgTypes[33].OneofWrappers = []any{}
	file_api_v1_urchin_proto_msgTypes[34].OneofWrappers = []any{}
	file_api_v1_urchin_proto_msgTypes[37].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1_urchin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_v1_urchin_proto_goTypes,
		DependencyIndexes: file_api_v1_urchin_proto_depIdxs,
		MessageInfos:      file_api_v1_urchin_proto_msgTypes,
	}.Build()
	File_api_v1_urchin_proto = out.File
	file_api_v1_urchin_proto_rawDesc = nil
	file_api_v1_urchin_proto_goTypes = nil
	file_api_v1_urchin_proto_depIdxs = nil
}
