// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: module/openi.proto

package module

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on OpenIGetTokenReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OpenIGetTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpenIGetTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OpenIGetTokenReqMultiError, or nil if none found.
func (m *OpenIGetTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *OpenIGetTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for ClientSecret

	// no validation rules for Code

	// no validation rules for GrantType

	// no validation rules for RedirectUri

	if len(errors) > 0 {
		return OpenIGetTokenReqMultiError(errors)
	}

	return nil
}

// OpenIGetTokenReqMultiError is an error wrapping multiple validation errors
// returned by OpenIGetTokenReq.ValidateAll() if the designated constraints
// aren't met.
type OpenIGetTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenIGetTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenIGetTokenReqMultiError) AllErrors() []error { return m }

// OpenIGetTokenReqValidationError is the validation error returned by
// OpenIGetTokenReq.Validate if the designated constraints aren't met.
type OpenIGetTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenIGetTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenIGetTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenIGetTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenIGetTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenIGetTokenReqValidationError) ErrorName() string { return "OpenIGetTokenReqValidationError" }

// Error satisfies the builtin error interface
func (e OpenIGetTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenIGetTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenIGetTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenIGetTokenReqValidationError{}

// Validate checks the field values on OpenIGetTokenResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OpenIGetTokenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpenIGetTokenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OpenIGetTokenRespMultiError, or nil if none found.
func (m *OpenIGetTokenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *OpenIGetTokenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for TokenType

	// no validation rules for ExpiresIn

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return OpenIGetTokenRespMultiError(errors)
	}

	return nil
}

// OpenIGetTokenRespMultiError is an error wrapping multiple validation errors
// returned by OpenIGetTokenResp.ValidateAll() if the designated constraints
// aren't met.
type OpenIGetTokenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenIGetTokenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenIGetTokenRespMultiError) AllErrors() []error { return m }

// OpenIGetTokenRespValidationError is the validation error returned by
// OpenIGetTokenResp.Validate if the designated constraints aren't met.
type OpenIGetTokenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenIGetTokenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenIGetTokenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenIGetTokenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenIGetTokenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenIGetTokenRespValidationError) ErrorName() string {
	return "OpenIGetTokenRespValidationError"
}

// Error satisfies the builtin error interface
func (e OpenIGetTokenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenIGetTokenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenIGetTokenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenIGetTokenRespValidationError{}

// Validate checks the field values on OpenIRefreshTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OpenIRefreshTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpenIRefreshTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OpenIRefreshTokenReqMultiError, or nil if none found.
func (m *OpenIRefreshTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *OpenIRefreshTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GrantType

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return OpenIRefreshTokenReqMultiError(errors)
	}

	return nil
}

// OpenIRefreshTokenReqMultiError is an error wrapping multiple validation
// errors returned by OpenIRefreshTokenReq.ValidateAll() if the designated
// constraints aren't met.
type OpenIRefreshTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenIRefreshTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenIRefreshTokenReqMultiError) AllErrors() []error { return m }

// OpenIRefreshTokenReqValidationError is the validation error returned by
// OpenIRefreshTokenReq.Validate if the designated constraints aren't met.
type OpenIRefreshTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenIRefreshTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenIRefreshTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenIRefreshTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenIRefreshTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenIRefreshTokenReqValidationError) ErrorName() string {
	return "OpenIRefreshTokenReqValidationError"
}

// Error satisfies the builtin error interface
func (e OpenIRefreshTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenIRefreshTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenIRefreshTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenIRefreshTokenReqValidationError{}

// Validate checks the field values on OpenIRefreshTokenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OpenIRefreshTokenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpenIRefreshTokenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OpenIRefreshTokenRespMultiError, or nil if none found.
func (m *OpenIRefreshTokenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *OpenIRefreshTokenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for TokenType

	// no validation rules for ExpiresIn

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return OpenIRefreshTokenRespMultiError(errors)
	}

	return nil
}

// OpenIRefreshTokenRespMultiError is an error wrapping multiple validation
// errors returned by OpenIRefreshTokenResp.ValidateAll() if the designated
// constraints aren't met.
type OpenIRefreshTokenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenIRefreshTokenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenIRefreshTokenRespMultiError) AllErrors() []error { return m }

// OpenIRefreshTokenRespValidationError is the validation error returned by
// OpenIRefreshTokenResp.Validate if the designated constraints aren't met.
type OpenIRefreshTokenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenIRefreshTokenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenIRefreshTokenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenIRefreshTokenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenIRefreshTokenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenIRefreshTokenRespValidationError) ErrorName() string {
	return "OpenIRefreshTokenRespValidationError"
}

// Error satisfies the builtin error interface
func (e OpenIRefreshTokenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenIRefreshTokenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenIRefreshTokenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenIRefreshTokenRespValidationError{}

// Validate checks the field values on OpenIGetUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OpenIGetUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpenIGetUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OpenIGetUserReqMultiError, or nil if none found.
func (m *OpenIGetUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *OpenIGetUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if len(errors) > 0 {
		return OpenIGetUserReqMultiError(errors)
	}

	return nil
}

// OpenIGetUserReqMultiError is an error wrapping multiple validation errors
// returned by OpenIGetUserReq.ValidateAll() if the designated constraints
// aren't met.
type OpenIGetUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenIGetUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenIGetUserReqMultiError) AllErrors() []error { return m }

// OpenIGetUserReqValidationError is the validation error returned by
// OpenIGetUserReq.Validate if the designated constraints aren't met.
type OpenIGetUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenIGetUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenIGetUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenIGetUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenIGetUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenIGetUserReqValidationError) ErrorName() string { return "OpenIGetUserReqValidationError" }

// Error satisfies the builtin error interface
func (e OpenIGetUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenIGetUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenIGetUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenIGetUserReqValidationError{}

// Validate checks the field values on OpenIGetUserResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OpenIGetUserResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpenIGetUserResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OpenIGetUserRespMultiError, or nil if none found.
func (m *OpenIGetUserResp) ValidateAll() error {
	return m.validate(true)
}

func (m *OpenIGetUserResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Login

	// no validation rules for Email

	// no validation rules for Username

	// no validation rules for AvatarUrl

	if len(errors) > 0 {
		return OpenIGetUserRespMultiError(errors)
	}

	return nil
}

// OpenIGetUserRespMultiError is an error wrapping multiple validation errors
// returned by OpenIGetUserResp.ValidateAll() if the designated constraints
// aren't met.
type OpenIGetUserRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenIGetUserRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenIGetUserRespMultiError) AllErrors() []error { return m }

// OpenIGetUserRespValidationError is the validation error returned by
// OpenIGetUserResp.Validate if the designated constraints aren't met.
type OpenIGetUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenIGetUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenIGetUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenIGetUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenIGetUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenIGetUserRespValidationError) ErrorName() string { return "OpenIGetUserRespValidationError" }

// Error satisfies the builtin error interface
func (e OpenIGetUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenIGetUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenIGetUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenIGetUserRespValidationError{}
